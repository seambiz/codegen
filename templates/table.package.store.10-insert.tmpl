{{- $conf := .Conf -}}
{{- $table := .Table -}}
{{- $schema := .Schema }}

// Insert inserts the {{ $table.Title }} to the database.
func ({{ $table.StoreReceiver }}) Insert(data *{{ $conf.RootPackage }}.{{ $table.Title }}) error {
    var err error
    sql := NewSQLStatement()
	{{- if $schema.IsMultiTenant }}
		sql.AppendRaw("INSERT INTO ", fmt.Sprintf("{{ $schema.MTSchemaFmt }}", {{ $table.Initials }}.{{ $schema.MTVarName }}), ".{{ $table.Name }} (")
	{{- else }}
		sql.Append("INSERT INTO {{ $schema.Name }}.{{ $table.Name }} (")
	{{- end }}
	fields := {{ $table.Title }}QueryFields({{ $table.Initials }}.colSet)
	sql.Fields("", "", fields)
	sql.Append(") VALUES (")
	for i := range fields {
	    if i > 0 {
	        sql.Append(",")
	    }
	    sql.Append("?")
	}
	sql.Append(")")
	
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
	    log.Debug().Str("fn", "{{ $schema.Name }}.{{ $table.Name }}.Insert").Str("stmt", sql.String()).
	    {{- zerologFields $table.Fields "data" -}}
	    .Msg("sql")
    }
	{{- $tmp := (index $table.Fields (index $table.FieldMapping "id")) -}}
	{{- if and $tmp.IsPrimaryKey $tmp.IsAutoincrement }}
		res, err :=
	{{- else }}
		_, err = 
	{{- end -}}
    {{ $table.Initials }}.db.Exec(sql.Query(),
    {{- range $i, $f := $table.Fields -}}
		{{- if gt $i 0 -}}
			, 
		{{- end -}}
		data.{{ $f.Title }}
	{{- end -}}
    )
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return err
	}
    
	{{- if and $tmp.IsPrimaryKey $tmp.IsAutoincrement }}
		// retrieve id
	    id, err := res.LastInsertId()
	    if err != nil {
		    log.Error().Err(err).Msg("lastinsertid")
		    return err
	    }

        // set primary key and existence
        data.ID = 
        {{- if eq $tmp.GoType "int64" -}}
            id
        {{- else -}}
            int(id)
        {{- end }}
    {{ end }}
	return nil
}
