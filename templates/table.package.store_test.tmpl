package {{ .Conf.Package }}


import (
	"testing"

	{{ .Conf.RootPackage }} "{{ .Conf.RootPackageInclude }}"
	
	"github.com/seambiz/seambiz/stime"
	"github.com/seambiz/seambiz/sdb"
	"github.com/DATA-DOG/go-sqlmock"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

{{- $conf := .Conf -}}
{{- $table := .Table -}}
{{- $schema := .Schema }}

// Insert inserts the {{ $table.Title }} to the database.
func Test{{ $table.Title }}Insert(t *testing.T) {
   	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	{{- if $schema.IsMultiTenant }}
	mock.
		ExpectExec("INSERT INTO ", fmt.Sprintf("{{ $schema.MTSchemaFmt }}", {{ $table.Initials }}.{{ $schema.MTVarName }}), ".{{ $table.Name }} (
	{{- else }}
	mock.
		ExpectExec("INSERT INTO {{ $schema.Name }}.{{ $table.Name }} (
	{{- end }}{{` `}}
	{{- range $i, $field := $table.Fields }}
    {{- if gt $i 0 }}, {{ end -}}
    {{ lower $field.Name }}
    {{- end -}}
	{{` `}}) VALUES ({{` `}}
	{{- range $i, $field := $table.Fields }}
    {{- if gt $i 0 }} , {{ end -}}
    ?
    {{- end -}}{{` `}})").
		WithArgs(
			{{- range $i, $field := $table.Fields }}
    		{{- if gt $i 0 }}, {{ end -}}
    		{{ if $field.IsNullable }}nil{{ else }}{{ $field.GoZero }}{{ end }}
    		{{- end -}}
		).
		WillReturnResult(sqlmock.NewResult(1, 1))


	store := New{{ $table.Title }}Store(db)
	err = store.Insert(&{{ .Conf.RootPackage }}.{{  $table.Title }}{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}

// Updates {{ $table.Title }}.
func Test{{ $table.Title }}Update(t *testing.T) {
   	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	{{- if $schema.IsMultiTenant }}
	mock.
		ExpectExec("UPDATE ", fmt.Sprintf("{{ $schema.MTSchemaFmt }}", {{ $table.Initials }}.{{ $schema.MTVarName }}), ".{{ $table.Name }}
	{{- else }}
	mock.
		ExpectExec("UPDATE {{ $schema.Name }}.{{ $table.Name }}
	{{- end -}}
	{{` SET `}}
	{{- range $i, $field := $table.Fields }}
    {{- if gt $i 0 }},{{ end -}}
    {{ lower $field.Name }} = ?
    {{- end -}}
	{{` WHERE`}}").
		WithArgs(
			{{- range $i, $field := $table.Fields }}
    		{{- if gt $i 0 }}, {{ end -}}
    		{{ if $field.IsNullable }}nil{{ else }}{{ $field.GoZero }}{{ end }}
    		{{- end -}}
		).
		WillReturnResult(sqlmock.NewResult(1, 1))


	store := New{{ $table.Title }}Store(db)
	aff, err := store.Update(&{{ .Conf.RootPackage }}.{{  $table.Title }}{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
