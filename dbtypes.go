package codegen

import "time"

// GENERATED BY CODEGEN. DO NOT EDIT.

/* Columns represents a row from COLUMNS. */
type Columns struct {
	TableCatalog           string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema            string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName              string  `json:"TABLE_NAME" db:"table_name"`
	ColumnName             string  `json:"COLUMN_NAME" db:"column_name"`
	OrdinalPosition        uint64  `json:"ORDINAL_POSITION" db:"ordinal_position"`
	ColumnDefault          *string `json:"COLUMN_DEFAULT" db:"column_default"`
	IsNullable             string  `json:"IS_NULLABLE" db:"is_nullable"`
	DataType               string  `json:"DATA_TYPE" db:"data_type"`
	CharacterMaximumLength *uint64 `json:"CHARACTER_MAXIMUM_LENGTH" db:"character_maximum_length"`
	CharacterOctetLength   *uint64 `json:"CHARACTER_OCTET_LENGTH" db:"character_octet_length"`
	NumericPrecision       *uint64 `json:"NUMERIC_PRECISION" db:"numeric_precision"`
	NumericScale           *uint64 `json:"NUMERIC_SCALE" db:"numeric_scale"`
	DatetimePrecision      *uint64 `json:"DATETIME_PRECISION" db:"datetime_precision"`
	CharacterSetName       *string `json:"CHARACTER_SET_NAME" db:"character_set_name"`
	CollationName          *string `json:"COLLATION_NAME" db:"collation_name"`
	ColumnType             string  `json:"COLUMN_TYPE" db:"column_type"`
	ColumnKey              string  `json:"COLUMN_KEY" db:"column_key"`
	Extra                  string  `json:"EXTRA" db:"extra"`
	Privileges             string  `json:"PRIVILEGES" db:"privileges"`
	ColumnComment          string  `json:"COLUMN_COMMENT" db:"column_comment"`
	GenerationExpression   string  `json:"GENERATION_EXPRESSION" db:"generation_expression"`
}

/* KeyColumnUsage represents a row from KEY_COLUMN_USAGE. */
type KeyColumnUsage struct {
	ConstraintCatalog          string  `json:"CONSTRAINT_CATALOG" db:"constraint_catalog"`
	ConstraintSchema           string  `json:"CONSTRAINT_SCHEMA" db:"constraint_schema"`
	ConstraintName             string  `json:"CONSTRAINT_NAME" db:"constraint_name"`
	TableCatalog               string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema                string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName                  string  `json:"TABLE_NAME" db:"table_name"`
	ColumnName                 string  `json:"COLUMN_NAME" db:"column_name"`
	OrdinalPosition            int64   `json:"ORDINAL_POSITION" db:"ordinal_position"`
	PositionInUniqueConstraint *int64  `json:"POSITION_IN_UNIQUE_CONSTRAINT" db:"position_in_unique_constraint"`
	ReferencedTableSchema      *string `json:"REFERENCED_TABLE_SCHEMA" db:"referenced_table_schema"`
	ReferencedTableName        *string `json:"REFERENCED_TABLE_NAME" db:"referenced_table_name"`
	ReferencedColumnName       *string `json:"REFERENCED_COLUMN_NAME" db:"referenced_column_name"`
}

/* Statistics represents a row from STATISTICS. */
type Statistics struct {
	TableCatalog string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema  string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName    string  `json:"TABLE_NAME" db:"table_name"`
	NonUnique    int64   `json:"NON_UNIQUE" db:"non_unique"`
	IndexSchema  string  `json:"INDEX_SCHEMA" db:"index_schema"`
	IndexName    string  `json:"INDEX_NAME" db:"index_name"`
	SeqInIndex   int64   `json:"SEQ_IN_INDEX" db:"seq_in_index"`
	ColumnName   string  `json:"COLUMN_NAME" db:"column_name"`
	Collation    *string `json:"COLLATION" db:"collation"`
	Cardinality  *int64  `json:"CARDINALITY" db:"cardinality"`
	SubPart      *int64  `json:"SUB_PART" db:"sub_part"`
	Packed       *string `json:"PACKED" db:"packed"`
	Nullable     string  `json:"NULLABLE" db:"nullable"`
	IndexType    string  `json:"INDEX_TYPE" db:"index_type"`
	Comment      *string `json:"COMMENT" db:"comment"`
	IndexComment string  `json:"INDEX_COMMENT" db:"index_comment"`
}

/* Tables represents a row from TABLES. */
type Tables struct {
	TableCatalog   string     `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema    string     `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName      string     `json:"TABLE_NAME" db:"table_name"`
	TableType      string     `json:"TABLE_TYPE" db:"table_type"`
	Engine         *string    `json:"ENGINE" db:"engine"`
	Version        *uint64    `json:"VERSION" db:"version"`
	RowFormat      *string    `json:"ROW_FORMAT" db:"row_format"`
	TableRows      *uint64    `json:"TABLE_ROWS" db:"table_rows"`
	AvgRowLength   *uint64    `json:"AVG_ROW_LENGTH" db:"avg_row_length"`
	DataLength     *uint64    `json:"DATA_LENGTH" db:"data_length"`
	MaxDataLength  *uint64    `json:"MAX_DATA_LENGTH" db:"max_data_length"`
	IndexLength    *uint64    `json:"INDEX_LENGTH" db:"index_length"`
	DataFree       *uint64    `json:"DATA_FREE" db:"data_free"`
	AutoIncrement  *uint64    `json:"AUTO_INCREMENT" db:"auto_increment"`
	CreateTime     *time.Time `json:"CREATE_TIME" db:"create_time"`
	UpdateTime     *time.Time `json:"UPDATE_TIME" db:"update_time"`
	CheckTime      *time.Time `json:"CHECK_TIME" db:"check_time"`
	TableCollation *string    `json:"TABLE_COLLATION" db:"table_collation"`
	Checksum       *uint64    `json:"CHECKSUM" db:"checksum"`
	CreateOptions  *string    `json:"CREATE_OPTIONS" db:"create_options"`
	TableComment   string     `json:"TABLE_COMMENT" db:"table_comment"`
}

/* Person represents a row from person. */
type Person struct {
	ID   int    `json:"id" db:"id"`
	Name string `json:"name" db:"name"`

	Pets []*Pet `json:"pets,omitempty"`
}

/* Tag represents a row from tag. */
type Tag struct {
	ID   int    `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
}

/* Pet represents a row from pet. */
type Pet struct {
	ID       int    `json:"id" db:"id"`
	PersonID int    `json:"person_id" db:"person_id"`
	TagID    int    `json:"tag_id" db:"tag_id"`
	Species  string `json:"species" db:"species"`

	BelongsTo *Person `json:"belongsto,omitempty"`
	HasTag    *Tag    `json:"hastag,omitempty"`
}

/* Extensive represents a row from extensive. */
type Extensive struct {
	ID               int        `json:"id" db:"id"`
	Tinyint          int        `json:"tinyint" db:"tinyint"`
	TinyintUnsigned  uint       `json:"tinyint_unsigned" db:"tinyint_unsigned"`
	TinyintNull      *int       `json:"tinyint_null" db:"tinyint_null"`
	Smallint         int        `json:"smallint" db:"smallint"`
	SmallintUnsigned uint       `json:"smallint_unsigned" db:"smallint_unsigned"`
	SmallintNull     *int       `json:"smallint_null" db:"smallint_null"`
	Int              int        `json:"int" db:"int"`
	IntNull          *int       `json:"int_null" db:"int_null"`
	IntUnsigned      uint       `json:"int_unsigned" db:"int_unsigned"`
	Bigint           int64      `json:"bigint" db:"bigint"`
	BigintNull       *int64     `json:"bigint_null" db:"bigint_null"`
	BigintUnsigned   uint64     `json:"bigint_unsigned" db:"bigint_unsigned"`
	Varchar          string     `json:"varchar" db:"varchar"`
	VarcharNull      *string    `json:"varchar_null" db:"varchar_null"`
	Float            float32    `json:"float" db:"float"`
	FloatNull        *float32   `json:"float_null" db:"float_null"`
	Double           float64    `json:"double" db:"double"`
	DoubleNull       *float64   `json:"double_null" db:"double_null"`
	Decimal          float64    `json:"decimal" db:"decimal"`
	DecimalNull      *float64   `json:"decimal_null" db:"decimal_null"`
	Numeric          float64    `json:"numeric" db:"numeric"`
	NumericNull      *float64   `json:"numeric_null" db:"numeric_null"`
	CreatedAt        uint       `json:"created_at" db:"created_at"`
	UpdatedAt        uint       `json:"updated_at" db:"updated_at"`
	Tinyint1         bool       `json:"tinyint1" db:"tinyint1"`
	Tinyint1Null     *bool      `json:"tinyint1_null" db:"tinyint1_null"`
	Year             int        `json:"year" db:"year"`
	YearNull         *int       `json:"year_null" db:"year_null"`
	Date             time.Time  `json:"date" db:"date"`
	DateNull         *time.Time `json:"date_null" db:"date_null"`
	Time             time.Time  `json:"time" db:"time"`
	TimeNull         *time.Time `json:"time_null" db:"time_null"`
	Datetime         time.Time  `json:"datetime" db:"datetime"`
	DatetimeNull     *time.Time `json:"datetime_null" db:"datetime_null"`
	Timestamp        time.Time  `json:"timestamp" db:"timestamp"`
	TimestampNull    *time.Time `json:"timestamp_null" db:"timestamp_null"`
	Char             string     `json:"char" db:"char"`
	CharNull         *string    `json:"char_null" db:"char_null"`
	Tinytext         string     `json:"tinytext" db:"tinytext"`
	TinytextNull     *string    `json:"tinytext_null" db:"tinytext_null"`
	Text             string     `json:"text" db:"text"`
	TextNull         *string    `json:"text_null" db:"text_null"`
	Mediumtext       string     `json:"mediumtext" db:"mediumtext"`
	MediumtextNull   *string    `json:"mediumtext_null" db:"mediumtext_null"`
	Longtext         string     `json:"longtext" db:"longtext"`
	LongtextNull     *string    `json:"longtext_null" db:"longtext_null"`
	Binary           []byte     `json:"binary" db:"binary"`
	BinaryNull       *[]byte    `json:"binary_null" db:"binary_null"`
	Varbinary        []byte     `json:"varbinary" db:"varbinary"`
	VarbinaryNull    *[]byte    `json:"varbinary_null" db:"varbinary_null"`
	Tinyblob         []byte     `json:"tinyblob" db:"tinyblob"`
	TinyblobNull     *[]byte    `json:"tinyblob_null" db:"tinyblob_null"`
	Blob             []byte     `json:"blob" db:"blob"`
	BlobNull         *[]byte    `json:"blob_null" db:"blob_null"`
	Mediumblob       []byte     `json:"mediumblob" db:"mediumblob"`
	MediumblobNull   *[]byte    `json:"mediumblob_null" db:"mediumblob_null"`
	Longblob         []byte     `json:"longblob" db:"longblob"`
	LongblobNull     *[]byte    `json:"longblob_null" db:"longblob_null"`
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
