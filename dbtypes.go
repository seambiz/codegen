package codegen

import (
	"math/big"
	"time"
)

// GENERATED BY CODEGEN.


	
	/* COLUMNS represents a row from COLUMNS. */
type COLUMNS struct {
	TABLECATALOG string `json:"TABLE_CATALOG" db:"table_catalog"`
	TABLESCHEMA string `json:"TABLE_SCHEMA" db:"table_schema"`
	TABLENAME string `json:"TABLE_NAME" db:"table_name"`
	COLUMNNAME *string `json:"COLUMN_NAME" db:"column_name"`
	ORDINALPOSITION uint `json:"ORDINAL_POSITION" db:"ordinal_position"`
	COLUMNDEFAULT *string `json:"COLUMN_DEFAULT" db:"column_default"`
	ISNULLABLE string `json:"IS_NULLABLE" db:"is_nullable"`
	DATATYPE *string `json:"DATA_TYPE" db:"data_type"`
	CHARACTERMAXIMUMLENGTH *int64 `json:"CHARACTER_MAXIMUM_LENGTH" db:"character_maximum_length"`
	CHARACTEROCTETLENGTH *int64 `json:"CHARACTER_OCTET_LENGTH" db:"character_octet_length"`
	NUMERICPRECISION *uint64 `json:"NUMERIC_PRECISION" db:"numeric_precision"`
	NUMERICSCALE *uint64 `json:"NUMERIC_SCALE" db:"numeric_scale"`
	DATETIMEPRECISION *uint `json:"DATETIME_PRECISION" db:"datetime_precision"`
	CHARACTERSETNAME *string `json:"CHARACTER_SET_NAME" db:"character_set_name"`
	COLLATIONNAME *string `json:"COLLATION_NAME" db:"collation_name"`
	COLUMNTYPE string `json:"COLUMN_TYPE" db:"column_type"`
	COLUMNKEY string `json:"COLUMN_KEY" db:"column_key"`
	EXTRA *string `json:"EXTRA" db:"extra"`
	PRIVILEGES *string `json:"PRIVILEGES" db:"privileges"`
	COLUMNCOMMENT string `json:"COLUMN_COMMENT" db:"column_comment"`
	GENERATIONEXPRESSION string `json:"GENERATION_EXPRESSION" db:"generation_expression"`
	
}

	
	
	
	/* KEYCOLUMNUSAGE represents a row from KEY_COLUMN_USAGE. */
type KEYCOLUMNUSAGE struct {
	CONSTRAINTCATALOG string `json:"CONSTRAINT_CATALOG" db:"constraint_catalog"`
	CONSTRAINTSCHEMA string `json:"CONSTRAINT_SCHEMA" db:"constraint_schema"`
	CONSTRAINTNAME *string `json:"CONSTRAINT_NAME" db:"constraint_name"`
	TABLECATALOG string `json:"TABLE_CATALOG" db:"table_catalog"`
	TABLESCHEMA string `json:"TABLE_SCHEMA" db:"table_schema"`
	TABLENAME string `json:"TABLE_NAME" db:"table_name"`
	COLUMNNAME *string `json:"COLUMN_NAME" db:"column_name"`
	ORDINALPOSITION uint `json:"ORDINAL_POSITION" db:"ordinal_position"`
	POSITIONINUNIQUECONSTRAINT *uint `json:"POSITION_IN_UNIQUE_CONSTRAINT" db:"position_in_unique_constraint"`
	REFERENCEDTABLESCHEMA *string `json:"REFERENCED_TABLE_SCHEMA" db:"referenced_table_schema"`
	REFERENCEDTABLENAME *string `json:"REFERENCED_TABLE_NAME" db:"referenced_table_name"`
	REFERENCEDCOLUMNNAME *string `json:"REFERENCED_COLUMN_NAME" db:"referenced_column_name"`
	
}

	
	
	
	/* STATISTICS represents a row from STATISTICS. */
type STATISTICS struct {
	TABLECATALOG string `json:"TABLE_CATALOG" db:"table_catalog"`
	TABLESCHEMA string `json:"TABLE_SCHEMA" db:"table_schema"`
	TABLENAME string `json:"TABLE_NAME" db:"table_name"`
	NONUNIQUE int `json:"NON_UNIQUE" db:"non_unique"`
	INDEXSCHEMA string `json:"INDEX_SCHEMA" db:"index_schema"`
	INDEXNAME *string `json:"INDEX_NAME" db:"index_name"`
	SEQININDEX uint `json:"SEQ_IN_INDEX" db:"seq_in_index"`
	COLUMNNAME *string `json:"COLUMN_NAME" db:"column_name"`
	COLLATION *string `json:"COLLATION" db:"collation"`
	CARDINALITY *int64 `json:"CARDINALITY" db:"cardinality"`
	SUBPART *int64 `json:"SUB_PART" db:"sub_part"`
	PACKED *[]byte `json:"PACKED" db:"packed"`
	NULLABLE string `json:"NULLABLE" db:"nullable"`
	INDEXTYPE string `json:"INDEX_TYPE" db:"index_type"`
	COMMENT string `json:"COMMENT" db:"comment"`
	INDEXCOMMENT string `json:"INDEX_COMMENT" db:"index_comment"`
	ISVISIBLE string `json:"IS_VISIBLE" db:"is_visible"`
	EXPRESSION *string `json:"EXPRESSION" db:"expression"`
	
}

	
	
	
	/* TABLES represents a row from TABLES. */
type TABLES struct {
	TABLECATALOG string `json:"TABLE_CATALOG" db:"table_catalog"`
	TABLESCHEMA string `json:"TABLE_SCHEMA" db:"table_schema"`
	TABLENAME string `json:"TABLE_NAME" db:"table_name"`
	TABLETYPE string `json:"TABLE_TYPE" db:"table_type"`
	ENGINE *string `json:"ENGINE" db:"engine"`
	VERSION *int `json:"VERSION" db:"version"`
	ROWFORMAT *string `json:"ROW_FORMAT" db:"row_format"`
	TABLEROWS *uint64 `json:"TABLE_ROWS" db:"table_rows"`
	AVGROWLENGTH *uint64 `json:"AVG_ROW_LENGTH" db:"avg_row_length"`
	DATALENGTH *uint64 `json:"DATA_LENGTH" db:"data_length"`
	MAXDATALENGTH *uint64 `json:"MAX_DATA_LENGTH" db:"max_data_length"`
	INDEXLENGTH *uint64 `json:"INDEX_LENGTH" db:"index_length"`
	DATAFREE *uint64 `json:"DATA_FREE" db:"data_free"`
	AUTOINCREMENT *uint64 `json:"AUTO_INCREMENT" db:"auto_increment"`
	CREATETIME time.Time `json:"CREATE_TIME" db:"create_time"`
	UPDATETIME *time.Time `json:"UPDATE_TIME" db:"update_time"`
	CHECKTIME *time.Time `json:"CHECK_TIME" db:"check_time"`
	TABLECOLLATION *string `json:"TABLE_COLLATION" db:"table_collation"`
	CHECKSUM *int64 `json:"CHECKSUM" db:"checksum"`
	CREATEOPTIONS *string `json:"CREATE_OPTIONS" db:"create_options"`
	TABLECOMMENT *string `json:"TABLE_COMMENT" db:"table_comment"`
	
}

	
	
	

	
	/* Person represents a row from person. */
type Person struct {
	ID int `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
	
	Pets []*Pet `json:"pets,omitempty"`
}

	
	
	
	/* Tag represents a row from tag. */
type Tag struct {
	ID int `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
	
}

	
	
	
	/* Pet represents a row from pet. */
type Pet struct {
	ID int `json:"id" db:"id"`
	PersonID int `json:"person_id" db:"person_id"`
	TagID int `json:"tag_id" db:"tag_id"`
	Species string `json:"species" db:"species"`
	
	BelongsTo *Person `json:"belongsto,omitempty"`
	HasTag *Tag `json:"hastag,omitempty"`
}

	
	
	
	/* Extensive represents a row from extensive. */
type Extensive struct {
	ID int `json:"id" db:"id"`
	Tinyint int `json:"tinyint" db:"tinyint"`
	TinyintUnsigned uint `json:"tinyint_unsigned" db:"tinyint_unsigned"`
	TinyintNull *int `json:"tinyint_null" db:"tinyint_null"`
	Smallint int `json:"smallint" db:"smallint"`
	SmallintUnsigned uint `json:"smallint_unsigned" db:"smallint_unsigned"`
	SmallintNull *int `json:"smallint_null" db:"smallint_null"`
	Int int `json:"int" db:"int"`
	IntNull *int `json:"int_null" db:"int_null"`
	IntUnsigned uint `json:"int_unsigned" db:"int_unsigned"`
	Bigint int64 `json:"bigint" db:"bigint"`
	BigintNull *int64 `json:"bigint_null" db:"bigint_null"`
	BigintUnsigned uint64 `json:"bigint_unsigned" db:"bigint_unsigned"`
	Varchar string `json:"varchar" db:"varchar"`
	VarcharNull *string `json:"varchar_null" db:"varchar_null"`
	Float float32 `json:"float" db:"float"`
	FloatNull *float32 `json:"float_null" db:"float_null"`
	Double float64 `json:"double" db:"double"`
	DoubleNull *float64 `json:"double_null" db:"double_null"`
	Decimal float64 `json:"decimal" db:"decimal"`
	DecimalNull *float64 `json:"decimal_null" db:"decimal_null"`
	Numeric float64 `json:"numeric" db:"numeric"`
	NumericNull *float64 `json:"numeric_null" db:"numeric_null"`
	CreatedAt uint `json:"created_at" db:"created_at"`
	UpdatedAt uint `json:"updated_at" db:"updated_at"`
	Tinyint1 bool `json:"tinyint1" db:"tinyint1"`
	Tinyint1Null *bool `json:"tinyint1_null" db:"tinyint1_null"`
	Year int `json:"year" db:"year"`
	YearNull *int `json:"year_null" db:"year_null"`
	Date time.Time `json:"date" db:"date"`
	DateNull *time.Time `json:"date_null" db:"date_null"`
	Time time.Time `json:"time" db:"time"`
	TimeNull *time.Time `json:"time_null" db:"time_null"`
	Datetime time.Time `json:"datetime" db:"datetime"`
	DatetimeNull *time.Time `json:"datetime_null" db:"datetime_null"`
	Timestamp time.Time `json:"timestamp" db:"timestamp"`
	TimestampNull *time.Time `json:"timestamp_null" db:"timestamp_null"`
	Char string `json:"char" db:"char"`
	CharNull *string `json:"char_null" db:"char_null"`
	Tinytext string `json:"tinytext" db:"tinytext"`
	TinytextNull *string `json:"tinytext_null" db:"tinytext_null"`
	Text string `json:"text" db:"text"`
	TextNull *string `json:"text_null" db:"text_null"`
	Mediumtext string `json:"mediumtext" db:"mediumtext"`
	MediumtextNull *string `json:"mediumtext_null" db:"mediumtext_null"`
	Longtext string `json:"longtext" db:"longtext"`
	LongtextNull *string `json:"longtext_null" db:"longtext_null"`
	Binary []byte `json:"binary" db:"binary"`
	BinaryNull *[]byte `json:"binary_null" db:"binary_null"`
	Varbinary []byte `json:"varbinary" db:"varbinary"`
	VarbinaryNull *[]byte `json:"varbinary_null" db:"varbinary_null"`
	Tinyblob []byte `json:"tinyblob" db:"tinyblob"`
	TinyblobNull *[]byte `json:"tinyblob_null" db:"tinyblob_null"`
	Blob []byte `json:"blob" db:"blob"`
	BlobNull *[]byte `json:"blob_null" db:"blob_null"`
	Mediumblob []byte `json:"mediumblob" db:"mediumblob"`
	MediumblobNull *[]byte `json:"mediumblob_null" db:"mediumblob_null"`
	Longblob []byte `json:"longblob" db:"longblob"`
	LongblobNull *[]byte `json:"longblob_null" db:"longblob_null"`
	
}

	
	
	




	
	/* COLUMNSPartial is used for updating specific columns from COLUMNS. */
type COLUMNSPartial struct {
	COLUMNS
	Touched big.Int
}
	
func (p *COLUMNSPartial) SetTABLECATALOG(param string) {
	p.TABLECATALOG = param
	p.Touched.SetBit(&p.Touched, COLUMNS_TABLECATALOG, 1)
}
func (p *COLUMNSPartial) SetTABLESCHEMA(param string) {
	p.TABLESCHEMA = param
	p.Touched.SetBit(&p.Touched, COLUMNS_TABLESCHEMA, 1)
}
func (p *COLUMNSPartial) SetTABLENAME(param string) {
	p.TABLENAME = param
	p.Touched.SetBit(&p.Touched, COLUMNS_TABLENAME, 1)
}
func (p *COLUMNSPartial) SetCOLUMNNAME(param *string) {
	p.COLUMNNAME = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLUMNNAME, 1)
}
func (p *COLUMNSPartial) SetORDINALPOSITION(param uint) {
	p.ORDINALPOSITION = param
	p.Touched.SetBit(&p.Touched, COLUMNS_ORDINALPOSITION, 1)
}
func (p *COLUMNSPartial) SetCOLUMNDEFAULT(param *string) {
	p.COLUMNDEFAULT = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLUMNDEFAULT, 1)
}
func (p *COLUMNSPartial) SetISNULLABLE(param string) {
	p.ISNULLABLE = param
	p.Touched.SetBit(&p.Touched, COLUMNS_ISNULLABLE, 1)
}
func (p *COLUMNSPartial) SetDATATYPE(param *string) {
	p.DATATYPE = param
	p.Touched.SetBit(&p.Touched, COLUMNS_DATATYPE, 1)
}
func (p *COLUMNSPartial) SetCHARACTERMAXIMUMLENGTH(param *int64) {
	p.CHARACTERMAXIMUMLENGTH = param
	p.Touched.SetBit(&p.Touched, COLUMNS_CHARACTERMAXIMUMLENGTH, 1)
}
func (p *COLUMNSPartial) SetCHARACTEROCTETLENGTH(param *int64) {
	p.CHARACTEROCTETLENGTH = param
	p.Touched.SetBit(&p.Touched, COLUMNS_CHARACTEROCTETLENGTH, 1)
}
func (p *COLUMNSPartial) SetNUMERICPRECISION(param *uint64) {
	p.NUMERICPRECISION = param
	p.Touched.SetBit(&p.Touched, COLUMNS_NUMERICPRECISION, 1)
}
func (p *COLUMNSPartial) SetNUMERICSCALE(param *uint64) {
	p.NUMERICSCALE = param
	p.Touched.SetBit(&p.Touched, COLUMNS_NUMERICSCALE, 1)
}
func (p *COLUMNSPartial) SetDATETIMEPRECISION(param *uint) {
	p.DATETIMEPRECISION = param
	p.Touched.SetBit(&p.Touched, COLUMNS_DATETIMEPRECISION, 1)
}
func (p *COLUMNSPartial) SetCHARACTERSETNAME(param *string) {
	p.CHARACTERSETNAME = param
	p.Touched.SetBit(&p.Touched, COLUMNS_CHARACTERSETNAME, 1)
}
func (p *COLUMNSPartial) SetCOLLATIONNAME(param *string) {
	p.COLLATIONNAME = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLLATIONNAME, 1)
}
func (p *COLUMNSPartial) SetCOLUMNTYPE(param string) {
	p.COLUMNTYPE = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLUMNTYPE, 1)
}
func (p *COLUMNSPartial) SetCOLUMNKEY(param string) {
	p.COLUMNKEY = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLUMNKEY, 1)
}
func (p *COLUMNSPartial) SetEXTRA(param *string) {
	p.EXTRA = param
	p.Touched.SetBit(&p.Touched, COLUMNS_EXTRA, 1)
}
func (p *COLUMNSPartial) SetPRIVILEGES(param *string) {
	p.PRIVILEGES = param
	p.Touched.SetBit(&p.Touched, COLUMNS_PRIVILEGES, 1)
}
func (p *COLUMNSPartial) SetCOLUMNCOMMENT(param string) {
	p.COLUMNCOMMENT = param
	p.Touched.SetBit(&p.Touched, COLUMNS_COLUMNCOMMENT, 1)
}
func (p *COLUMNSPartial) SetGENERATIONEXPRESSION(param string) {
	p.GENERATIONEXPRESSION = param
	p.Touched.SetBit(&p.Touched, COLUMNS_GENERATIONEXPRESSION, 1)
}
	
	/* KEYCOLUMNUSAGEPartial is used for updating specific columns from KEY_COLUMN_USAGE. */
type KEYCOLUMNUSAGEPartial struct {
	KEYCOLUMNUSAGE
	Touched big.Int
}
	
func (p *KEYCOLUMNUSAGEPartial) SetCONSTRAINTCATALOG(param string) {
	p.CONSTRAINTCATALOG = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_CONSTRAINTCATALOG, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetCONSTRAINTSCHEMA(param string) {
	p.CONSTRAINTSCHEMA = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_CONSTRAINTSCHEMA, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetCONSTRAINTNAME(param *string) {
	p.CONSTRAINTNAME = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_CONSTRAINTNAME, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetTABLECATALOG(param string) {
	p.TABLECATALOG = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_TABLECATALOG, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetTABLESCHEMA(param string) {
	p.TABLESCHEMA = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_TABLESCHEMA, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetTABLENAME(param string) {
	p.TABLENAME = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_TABLENAME, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetCOLUMNNAME(param *string) {
	p.COLUMNNAME = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_COLUMNNAME, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetORDINALPOSITION(param uint) {
	p.ORDINALPOSITION = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_ORDINALPOSITION, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetPOSITIONINUNIQUECONSTRAINT(param *uint) {
	p.POSITIONINUNIQUECONSTRAINT = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetREFERENCEDTABLESCHEMA(param *string) {
	p.REFERENCEDTABLESCHEMA = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetREFERENCEDTABLENAME(param *string) {
	p.REFERENCEDTABLENAME = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_REFERENCEDTABLENAME, 1)
}
func (p *KEYCOLUMNUSAGEPartial) SetREFERENCEDCOLUMNNAME(param *string) {
	p.REFERENCEDCOLUMNNAME = param
	p.Touched.SetBit(&p.Touched, KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME, 1)
}
	
	/* STATISTICSPartial is used for updating specific columns from STATISTICS. */
type STATISTICSPartial struct {
	STATISTICS
	Touched big.Int
}
	
func (p *STATISTICSPartial) SetTABLECATALOG(param string) {
	p.TABLECATALOG = param
	p.Touched.SetBit(&p.Touched, STATISTICS_TABLECATALOG, 1)
}
func (p *STATISTICSPartial) SetTABLESCHEMA(param string) {
	p.TABLESCHEMA = param
	p.Touched.SetBit(&p.Touched, STATISTICS_TABLESCHEMA, 1)
}
func (p *STATISTICSPartial) SetTABLENAME(param string) {
	p.TABLENAME = param
	p.Touched.SetBit(&p.Touched, STATISTICS_TABLENAME, 1)
}
func (p *STATISTICSPartial) SetNONUNIQUE(param int) {
	p.NONUNIQUE = param
	p.Touched.SetBit(&p.Touched, STATISTICS_NONUNIQUE, 1)
}
func (p *STATISTICSPartial) SetINDEXSCHEMA(param string) {
	p.INDEXSCHEMA = param
	p.Touched.SetBit(&p.Touched, STATISTICS_INDEXSCHEMA, 1)
}
func (p *STATISTICSPartial) SetINDEXNAME(param *string) {
	p.INDEXNAME = param
	p.Touched.SetBit(&p.Touched, STATISTICS_INDEXNAME, 1)
}
func (p *STATISTICSPartial) SetSEQININDEX(param uint) {
	p.SEQININDEX = param
	p.Touched.SetBit(&p.Touched, STATISTICS_SEQININDEX, 1)
}
func (p *STATISTICSPartial) SetCOLUMNNAME(param *string) {
	p.COLUMNNAME = param
	p.Touched.SetBit(&p.Touched, STATISTICS_COLUMNNAME, 1)
}
func (p *STATISTICSPartial) SetCOLLATION(param *string) {
	p.COLLATION = param
	p.Touched.SetBit(&p.Touched, STATISTICS_COLLATION, 1)
}
func (p *STATISTICSPartial) SetCARDINALITY(param *int64) {
	p.CARDINALITY = param
	p.Touched.SetBit(&p.Touched, STATISTICS_CARDINALITY, 1)
}
func (p *STATISTICSPartial) SetSUBPART(param *int64) {
	p.SUBPART = param
	p.Touched.SetBit(&p.Touched, STATISTICS_SUBPART, 1)
}
func (p *STATISTICSPartial) SetPACKED(param *[]byte) {
	p.PACKED = param
	p.Touched.SetBit(&p.Touched, STATISTICS_PACKED, 1)
}
func (p *STATISTICSPartial) SetNULLABLE(param string) {
	p.NULLABLE = param
	p.Touched.SetBit(&p.Touched, STATISTICS_NULLABLE, 1)
}
func (p *STATISTICSPartial) SetINDEXTYPE(param string) {
	p.INDEXTYPE = param
	p.Touched.SetBit(&p.Touched, STATISTICS_INDEXTYPE, 1)
}
func (p *STATISTICSPartial) SetCOMMENT(param string) {
	p.COMMENT = param
	p.Touched.SetBit(&p.Touched, STATISTICS_COMMENT, 1)
}
func (p *STATISTICSPartial) SetINDEXCOMMENT(param string) {
	p.INDEXCOMMENT = param
	p.Touched.SetBit(&p.Touched, STATISTICS_INDEXCOMMENT, 1)
}
func (p *STATISTICSPartial) SetISVISIBLE(param string) {
	p.ISVISIBLE = param
	p.Touched.SetBit(&p.Touched, STATISTICS_ISVISIBLE, 1)
}
func (p *STATISTICSPartial) SetEXPRESSION(param *string) {
	p.EXPRESSION = param
	p.Touched.SetBit(&p.Touched, STATISTICS_EXPRESSION, 1)
}
	
	/* TABLESPartial is used for updating specific columns from TABLES. */
type TABLESPartial struct {
	TABLES
	Touched big.Int
}
	
func (p *TABLESPartial) SetTABLECATALOG(param string) {
	p.TABLECATALOG = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLECATALOG, 1)
}
func (p *TABLESPartial) SetTABLESCHEMA(param string) {
	p.TABLESCHEMA = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLESCHEMA, 1)
}
func (p *TABLESPartial) SetTABLENAME(param string) {
	p.TABLENAME = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLENAME, 1)
}
func (p *TABLESPartial) SetTABLETYPE(param string) {
	p.TABLETYPE = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLETYPE, 1)
}
func (p *TABLESPartial) SetENGINE(param *string) {
	p.ENGINE = param
	p.Touched.SetBit(&p.Touched, TABLES_ENGINE, 1)
}
func (p *TABLESPartial) SetVERSION(param *int) {
	p.VERSION = param
	p.Touched.SetBit(&p.Touched, TABLES_VERSION, 1)
}
func (p *TABLESPartial) SetROWFORMAT(param *string) {
	p.ROWFORMAT = param
	p.Touched.SetBit(&p.Touched, TABLES_ROWFORMAT, 1)
}
func (p *TABLESPartial) SetTABLEROWS(param *uint64) {
	p.TABLEROWS = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLEROWS, 1)
}
func (p *TABLESPartial) SetAVGROWLENGTH(param *uint64) {
	p.AVGROWLENGTH = param
	p.Touched.SetBit(&p.Touched, TABLES_AVGROWLENGTH, 1)
}
func (p *TABLESPartial) SetDATALENGTH(param *uint64) {
	p.DATALENGTH = param
	p.Touched.SetBit(&p.Touched, TABLES_DATALENGTH, 1)
}
func (p *TABLESPartial) SetMAXDATALENGTH(param *uint64) {
	p.MAXDATALENGTH = param
	p.Touched.SetBit(&p.Touched, TABLES_MAXDATALENGTH, 1)
}
func (p *TABLESPartial) SetINDEXLENGTH(param *uint64) {
	p.INDEXLENGTH = param
	p.Touched.SetBit(&p.Touched, TABLES_INDEXLENGTH, 1)
}
func (p *TABLESPartial) SetDATAFREE(param *uint64) {
	p.DATAFREE = param
	p.Touched.SetBit(&p.Touched, TABLES_DATAFREE, 1)
}
func (p *TABLESPartial) SetAUTOINCREMENT(param *uint64) {
	p.AUTOINCREMENT = param
	p.Touched.SetBit(&p.Touched, TABLES_AUTOINCREMENT, 1)
}
func (p *TABLESPartial) SetCREATETIME(param time.Time) {
	p.CREATETIME = param
	p.Touched.SetBit(&p.Touched, TABLES_CREATETIME, 1)
}
func (p *TABLESPartial) SetUPDATETIME(param *time.Time) {
	p.UPDATETIME = param
	p.Touched.SetBit(&p.Touched, TABLES_UPDATETIME, 1)
}
func (p *TABLESPartial) SetCHECKTIME(param *time.Time) {
	p.CHECKTIME = param
	p.Touched.SetBit(&p.Touched, TABLES_CHECKTIME, 1)
}
func (p *TABLESPartial) SetTABLECOLLATION(param *string) {
	p.TABLECOLLATION = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLECOLLATION, 1)
}
func (p *TABLESPartial) SetCHECKSUM(param *int64) {
	p.CHECKSUM = param
	p.Touched.SetBit(&p.Touched, TABLES_CHECKSUM, 1)
}
func (p *TABLESPartial) SetCREATEOPTIONS(param *string) {
	p.CREATEOPTIONS = param
	p.Touched.SetBit(&p.Touched, TABLES_CREATEOPTIONS, 1)
}
func (p *TABLESPartial) SetTABLECOMMENT(param *string) {
	p.TABLECOMMENT = param
	p.Touched.SetBit(&p.Touched, TABLES_TABLECOMMENT, 1)
}
	
	
	/* PersonPartial is used for updating specific columns from person. */
type PersonPartial struct {
	Person
	Touched big.Int
}
	
func (p *PersonPartial) SetID(param int) {
	p.ID = param
	p.Touched.SetBit(&p.Touched, Person_ID, 1)
}
func (p *PersonPartial) SetName(param string) {
	p.Name = param
	p.Touched.SetBit(&p.Touched, Person_Name, 1)
}
	
	/* TagPartial is used for updating specific columns from tag. */
type TagPartial struct {
	Tag
	Touched big.Int
}
	
func (p *TagPartial) SetID(param int) {
	p.ID = param
	p.Touched.SetBit(&p.Touched, Tag_ID, 1)
}
func (p *TagPartial) SetName(param string) {
	p.Name = param
	p.Touched.SetBit(&p.Touched, Tag_Name, 1)
}
	
	/* PetPartial is used for updating specific columns from pet. */
type PetPartial struct {
	Pet
	Touched big.Int
}
	
func (p *PetPartial) SetID(param int) {
	p.ID = param
	p.Touched.SetBit(&p.Touched, Pet_ID, 1)
}
func (p *PetPartial) SetPersonID(param int) {
	p.PersonID = param
	p.Touched.SetBit(&p.Touched, Pet_PersonID, 1)
}
func (p *PetPartial) SetTagID(param int) {
	p.TagID = param
	p.Touched.SetBit(&p.Touched, Pet_TagID, 1)
}
func (p *PetPartial) SetSpecies(param string) {
	p.Species = param
	p.Touched.SetBit(&p.Touched, Pet_Species, 1)
}
	
	/* ExtensivePartial is used for updating specific columns from extensive. */
type ExtensivePartial struct {
	Extensive
	Touched big.Int
}
	
func (p *ExtensivePartial) SetID(param int) {
	p.ID = param
	p.Touched.SetBit(&p.Touched, Extensive_ID, 1)
}
func (p *ExtensivePartial) SetTinyint(param int) {
	p.Tinyint = param
	p.Touched.SetBit(&p.Touched, Extensive_Tinyint, 1)
}
func (p *ExtensivePartial) SetTinyintUnsigned(param uint) {
	p.TinyintUnsigned = param
	p.Touched.SetBit(&p.Touched, Extensive_TinyintUnsigned, 1)
}
func (p *ExtensivePartial) SetTinyintNull(param *int) {
	p.TinyintNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TinyintNull, 1)
}
func (p *ExtensivePartial) SetSmallint(param int) {
	p.Smallint = param
	p.Touched.SetBit(&p.Touched, Extensive_Smallint, 1)
}
func (p *ExtensivePartial) SetSmallintUnsigned(param uint) {
	p.SmallintUnsigned = param
	p.Touched.SetBit(&p.Touched, Extensive_SmallintUnsigned, 1)
}
func (p *ExtensivePartial) SetSmallintNull(param *int) {
	p.SmallintNull = param
	p.Touched.SetBit(&p.Touched, Extensive_SmallintNull, 1)
}
func (p *ExtensivePartial) SetInt(param int) {
	p.Int = param
	p.Touched.SetBit(&p.Touched, Extensive_Int, 1)
}
func (p *ExtensivePartial) SetIntNull(param *int) {
	p.IntNull = param
	p.Touched.SetBit(&p.Touched, Extensive_IntNull, 1)
}
func (p *ExtensivePartial) SetIntUnsigned(param uint) {
	p.IntUnsigned = param
	p.Touched.SetBit(&p.Touched, Extensive_IntUnsigned, 1)
}
func (p *ExtensivePartial) SetBigint(param int64) {
	p.Bigint = param
	p.Touched.SetBit(&p.Touched, Extensive_Bigint, 1)
}
func (p *ExtensivePartial) SetBigintNull(param *int64) {
	p.BigintNull = param
	p.Touched.SetBit(&p.Touched, Extensive_BigintNull, 1)
}
func (p *ExtensivePartial) SetBigintUnsigned(param uint64) {
	p.BigintUnsigned = param
	p.Touched.SetBit(&p.Touched, Extensive_BigintUnsigned, 1)
}
func (p *ExtensivePartial) SetVarchar(param string) {
	p.Varchar = param
	p.Touched.SetBit(&p.Touched, Extensive_Varchar, 1)
}
func (p *ExtensivePartial) SetVarcharNull(param *string) {
	p.VarcharNull = param
	p.Touched.SetBit(&p.Touched, Extensive_VarcharNull, 1)
}
func (p *ExtensivePartial) SetFloat(param float32) {
	p.Float = param
	p.Touched.SetBit(&p.Touched, Extensive_Float, 1)
}
func (p *ExtensivePartial) SetFloatNull(param *float32) {
	p.FloatNull = param
	p.Touched.SetBit(&p.Touched, Extensive_FloatNull, 1)
}
func (p *ExtensivePartial) SetDouble(param float64) {
	p.Double = param
	p.Touched.SetBit(&p.Touched, Extensive_Double, 1)
}
func (p *ExtensivePartial) SetDoubleNull(param *float64) {
	p.DoubleNull = param
	p.Touched.SetBit(&p.Touched, Extensive_DoubleNull, 1)
}
func (p *ExtensivePartial) SetDecimal(param float64) {
	p.Decimal = param
	p.Touched.SetBit(&p.Touched, Extensive_Decimal, 1)
}
func (p *ExtensivePartial) SetDecimalNull(param *float64) {
	p.DecimalNull = param
	p.Touched.SetBit(&p.Touched, Extensive_DecimalNull, 1)
}
func (p *ExtensivePartial) SetNumeric(param float64) {
	p.Numeric = param
	p.Touched.SetBit(&p.Touched, Extensive_Numeric, 1)
}
func (p *ExtensivePartial) SetNumericNull(param *float64) {
	p.NumericNull = param
	p.Touched.SetBit(&p.Touched, Extensive_NumericNull, 1)
}
func (p *ExtensivePartial) SetCreatedAt(param uint) {
	p.CreatedAt = param
	p.Touched.SetBit(&p.Touched, Extensive_CreatedAt, 1)
}
func (p *ExtensivePartial) SetUpdatedAt(param uint) {
	p.UpdatedAt = param
	p.Touched.SetBit(&p.Touched, Extensive_UpdatedAt, 1)
}
func (p *ExtensivePartial) SetTinyint1(param bool) {
	p.Tinyint1 = param
	p.Touched.SetBit(&p.Touched, Extensive_Tinyint1, 1)
}
func (p *ExtensivePartial) SetTinyint1Null(param *bool) {
	p.Tinyint1Null = param
	p.Touched.SetBit(&p.Touched, Extensive_Tinyint1Null, 1)
}
func (p *ExtensivePartial) SetYear(param int) {
	p.Year = param
	p.Touched.SetBit(&p.Touched, Extensive_Year, 1)
}
func (p *ExtensivePartial) SetYearNull(param *int) {
	p.YearNull = param
	p.Touched.SetBit(&p.Touched, Extensive_YearNull, 1)
}
func (p *ExtensivePartial) SetDate(param time.Time) {
	p.Date = param
	p.Touched.SetBit(&p.Touched, Extensive_Date, 1)
}
func (p *ExtensivePartial) SetDateNull(param *time.Time) {
	p.DateNull = param
	p.Touched.SetBit(&p.Touched, Extensive_DateNull, 1)
}
func (p *ExtensivePartial) SetTime(param time.Time) {
	p.Time = param
	p.Touched.SetBit(&p.Touched, Extensive_Time, 1)
}
func (p *ExtensivePartial) SetTimeNull(param *time.Time) {
	p.TimeNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TimeNull, 1)
}
func (p *ExtensivePartial) SetDatetime(param time.Time) {
	p.Datetime = param
	p.Touched.SetBit(&p.Touched, Extensive_Datetime, 1)
}
func (p *ExtensivePartial) SetDatetimeNull(param *time.Time) {
	p.DatetimeNull = param
	p.Touched.SetBit(&p.Touched, Extensive_DatetimeNull, 1)
}
func (p *ExtensivePartial) SetTimestamp(param time.Time) {
	p.Timestamp = param
	p.Touched.SetBit(&p.Touched, Extensive_Timestamp, 1)
}
func (p *ExtensivePartial) SetTimestampNull(param *time.Time) {
	p.TimestampNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TimestampNull, 1)
}
func (p *ExtensivePartial) SetChar(param string) {
	p.Char = param
	p.Touched.SetBit(&p.Touched, Extensive_Char, 1)
}
func (p *ExtensivePartial) SetCharNull(param *string) {
	p.CharNull = param
	p.Touched.SetBit(&p.Touched, Extensive_CharNull, 1)
}
func (p *ExtensivePartial) SetTinytext(param string) {
	p.Tinytext = param
	p.Touched.SetBit(&p.Touched, Extensive_Tinytext, 1)
}
func (p *ExtensivePartial) SetTinytextNull(param *string) {
	p.TinytextNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TinytextNull, 1)
}
func (p *ExtensivePartial) SetText(param string) {
	p.Text = param
	p.Touched.SetBit(&p.Touched, Extensive_Text, 1)
}
func (p *ExtensivePartial) SetTextNull(param *string) {
	p.TextNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TextNull, 1)
}
func (p *ExtensivePartial) SetMediumtext(param string) {
	p.Mediumtext = param
	p.Touched.SetBit(&p.Touched, Extensive_Mediumtext, 1)
}
func (p *ExtensivePartial) SetMediumtextNull(param *string) {
	p.MediumtextNull = param
	p.Touched.SetBit(&p.Touched, Extensive_MediumtextNull, 1)
}
func (p *ExtensivePartial) SetLongtext(param string) {
	p.Longtext = param
	p.Touched.SetBit(&p.Touched, Extensive_Longtext, 1)
}
func (p *ExtensivePartial) SetLongtextNull(param *string) {
	p.LongtextNull = param
	p.Touched.SetBit(&p.Touched, Extensive_LongtextNull, 1)
}
func (p *ExtensivePartial) SetBinary(param []byte) {
	p.Binary = param
	p.Touched.SetBit(&p.Touched, Extensive_Binary, 1)
}
func (p *ExtensivePartial) SetBinaryNull(param *[]byte) {
	p.BinaryNull = param
	p.Touched.SetBit(&p.Touched, Extensive_BinaryNull, 1)
}
func (p *ExtensivePartial) SetVarbinary(param []byte) {
	p.Varbinary = param
	p.Touched.SetBit(&p.Touched, Extensive_Varbinary, 1)
}
func (p *ExtensivePartial) SetVarbinaryNull(param *[]byte) {
	p.VarbinaryNull = param
	p.Touched.SetBit(&p.Touched, Extensive_VarbinaryNull, 1)
}
func (p *ExtensivePartial) SetTinyblob(param []byte) {
	p.Tinyblob = param
	p.Touched.SetBit(&p.Touched, Extensive_Tinyblob, 1)
}
func (p *ExtensivePartial) SetTinyblobNull(param *[]byte) {
	p.TinyblobNull = param
	p.Touched.SetBit(&p.Touched, Extensive_TinyblobNull, 1)
}
func (p *ExtensivePartial) SetBlob(param []byte) {
	p.Blob = param
	p.Touched.SetBit(&p.Touched, Extensive_Blob, 1)
}
func (p *ExtensivePartial) SetBlobNull(param *[]byte) {
	p.BlobNull = param
	p.Touched.SetBit(&p.Touched, Extensive_BlobNull, 1)
}
func (p *ExtensivePartial) SetMediumblob(param []byte) {
	p.Mediumblob = param
	p.Touched.SetBit(&p.Touched, Extensive_Mediumblob, 1)
}
func (p *ExtensivePartial) SetMediumblobNull(param *[]byte) {
	p.MediumblobNull = param
	p.Touched.SetBit(&p.Touched, Extensive_MediumblobNull, 1)
}
func (p *ExtensivePartial) SetLongblob(param []byte) {
	p.Longblob = param
	p.Touched.SetBit(&p.Touched, Extensive_Longblob, 1)
}
func (p *ExtensivePartial) SetLongblobNull(param *[]byte) {
	p.LongblobNull = param
	p.Touched.SetBit(&p.Touched, Extensive_LongblobNull, 1)
}
	

// ^^ END OF GENERATED BY CODEGEN. ^^
