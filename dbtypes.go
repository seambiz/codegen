package codegen

import "time"

// GENERATED BY CODEGEN. DO NOT EDIT.

/* Columns represents a row from COLUMNS. */
type Columns struct {
	TableCatalog           string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema            string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName              string  `json:"TABLE_NAME" db:"table_name"`
	ColumnName             string  `json:"COLUMN_NAME" db:"column_name"`
	OrdinalPosition        uint64  `json:"ORDINAL_POSITION" db:"ordinal_position"`
	ColumnDefault          *string `json:"COLUMN_DEFAULT" db:"column_default"`
	IsNullable             string  `json:"IS_NULLABLE" db:"is_nullable"`
	DataType               string  `json:"DATA_TYPE" db:"data_type"`
	CharacterMaximumLength *uint64 `json:"CHARACTER_MAXIMUM_LENGTH" db:"character_maximum_length"`
	CharacterOctetLength   *uint64 `json:"CHARACTER_OCTET_LENGTH" db:"character_octet_length"`
	NumericPrecision       *uint64 `json:"NUMERIC_PRECISION" db:"numeric_precision"`
	NumericScale           *uint64 `json:"NUMERIC_SCALE" db:"numeric_scale"`
	DatetimePrecision      *uint64 `json:"DATETIME_PRECISION" db:"datetime_precision"`
	CharacterSetName       *string `json:"CHARACTER_SET_NAME" db:"character_set_name"`
	CollationName          *string `json:"COLLATION_NAME" db:"collation_name"`
	ColumnType             string  `json:"COLUMN_TYPE" db:"column_type"`
	ColumnKey              string  `json:"COLUMN_KEY" db:"column_key"`
	Extra                  string  `json:"EXTRA" db:"extra"`
	Privileges             string  `json:"PRIVILEGES" db:"privileges"`
	ColumnComment          string  `json:"COLUMN_COMMENT" db:"column_comment"`
	GenerationExpression   string  `json:"GENERATION_EXPRESSION" db:"generation_expression"`
}

/* KeyColumnUsage represents a row from KEY_COLUMN_USAGE. */
type KeyColumnUsage struct {
	ConstraintCatalog          string  `json:"CONSTRAINT_CATALOG" db:"constraint_catalog"`
	ConstraintSchema           string  `json:"CONSTRAINT_SCHEMA" db:"constraint_schema"`
	ConstraintName             string  `json:"CONSTRAINT_NAME" db:"constraint_name"`
	TableCatalog               string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema                string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName                  string  `json:"TABLE_NAME" db:"table_name"`
	ColumnName                 string  `json:"COLUMN_NAME" db:"column_name"`
	OrdinalPosition            int64   `json:"ORDINAL_POSITION" db:"ordinal_position"`
	PositionInUniqueConstraint *int64  `json:"POSITION_IN_UNIQUE_CONSTRAINT" db:"position_in_unique_constraint"`
	ReferencedTableSchema      *string `json:"REFERENCED_TABLE_SCHEMA" db:"referenced_table_schema"`
	ReferencedTableName        *string `json:"REFERENCED_TABLE_NAME" db:"referenced_table_name"`
	ReferencedColumnName       *string `json:"REFERENCED_COLUMN_NAME" db:"referenced_column_name"`
}

/* Statistics represents a row from STATISTICS. */
type Statistics struct {
	TableCatalog string  `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema  string  `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName    string  `json:"TABLE_NAME" db:"table_name"`
	NonUnique    int64   `json:"NON_UNIQUE" db:"non_unique"`
	IndexSchema  string  `json:"INDEX_SCHEMA" db:"index_schema"`
	IndexName    string  `json:"INDEX_NAME" db:"index_name"`
	SeqInIndex   int64   `json:"SEQ_IN_INDEX" db:"seq_in_index"`
	ColumnName   string  `json:"COLUMN_NAME" db:"column_name"`
	Collation    *string `json:"COLLATION" db:"collation"`
	Cardinality  *int64  `json:"CARDINALITY" db:"cardinality"`
	SubPart      *int64  `json:"SUB_PART" db:"sub_part"`
	Packed       *string `json:"PACKED" db:"packed"`
	Nullable     string  `json:"NULLABLE" db:"nullable"`
	IndexType    string  `json:"INDEX_TYPE" db:"index_type"`
	Comment      *string `json:"COMMENT" db:"comment"`
	IndexComment string  `json:"INDEX_COMMENT" db:"index_comment"`
}

/* Tables represents a row from TABLES. */
type Tables struct {
	TableCatalog   string     `json:"TABLE_CATALOG" db:"table_catalog"`
	TableSchema    string     `json:"TABLE_SCHEMA" db:"table_schema"`
	TableName      string     `json:"TABLE_NAME" db:"table_name"`
	TableType      string     `json:"TABLE_TYPE" db:"table_type"`
	Engine         *string    `json:"ENGINE" db:"engine"`
	Version        *uint64    `json:"VERSION" db:"version"`
	RowFormat      *string    `json:"ROW_FORMAT" db:"row_format"`
	TableRows      *uint64    `json:"TABLE_ROWS" db:"table_rows"`
	AvgRowLength   *uint64    `json:"AVG_ROW_LENGTH" db:"avg_row_length"`
	DataLength     *uint64    `json:"DATA_LENGTH" db:"data_length"`
	MaxDataLength  *uint64    `json:"MAX_DATA_LENGTH" db:"max_data_length"`
	IndexLength    *uint64    `json:"INDEX_LENGTH" db:"index_length"`
	DataFree       *uint64    `json:"DATA_FREE" db:"data_free"`
	AutoIncrement  *uint64    `json:"AUTO_INCREMENT" db:"auto_increment"`
	CreateTime     *time.Time `json:"CREATE_TIME" db:"create_time"`
	UpdateTime     *time.Time `json:"UPDATE_TIME" db:"update_time"`
	CheckTime      *time.Time `json:"CHECK_TIME" db:"check_time"`
	TableCollation *string    `json:"TABLE_COLLATION" db:"table_collation"`
	Checksum       *uint64    `json:"CHECKSUM" db:"checksum"`
	CreateOptions  *string    `json:"CREATE_OPTIONS" db:"create_options"`
	TableComment   string     `json:"TABLE_COMMENT" db:"table_comment"`
}

/* Person represents a row from person. */
type Person struct {
	ID   int    `json:"id" db:"id"`
	Name string `json:"name" db:"name"`

	Pets []*Pet `json:"pets,omitempty"`
}

/* Tag represents a row from tag. */
type Tag struct {
	ID   int    `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
}

/* Pet represents a row from pet. */
type Pet struct {
	ID       int    `json:"id" db:"id"`
	PersonID int    `json:"person_id" db:"person_id"`
	TagID    int    `json:"tag_id" db:"tag_id"`
	Species  string `json:"species" db:"species"`

	BelongsTo *Person `json:"belongsto,omitempty"`
	HasTag    *Tag    `json:"hastag,omitempty"`
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
