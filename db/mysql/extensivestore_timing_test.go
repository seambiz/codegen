package mysql

import (
	"database/sql/driver"
	"testing"

	codegen "bitbucket.org/codegen"

	"github.com/brianvoe/gofakeit/v5"
	"github.com/rs/zerolog"
)

// GENERATED BY CODEGEN.

func BenchmarkExtensiveInsert(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log: &zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.Extensive{}
	store := NewExtensiveStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			err := store.Insert(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkExtensiveUpdate(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log: &zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.Extensive{}
	store := NewExtensiveStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Update(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkExtensiveDelete(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log: &zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.Extensive{}
	store := NewExtensiveStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Delete(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkExtensiveSelectAll(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log: &zerolog.Logger{}}

	db, err := selectQuery(extensiveQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.Extensive{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{data.ID, data.Tinyint, data.TinyintUnsigned, *data.TinyintNull, data.Smallint, data.SmallintUnsigned, *data.SmallintNull, data.Int, *data.IntNull, data.IntUnsigned, data.Bigint, *data.BigintNull, data.BigintUnsigned, data.Varchar, *data.VarcharNull, data.Float, *data.FloatNull, data.Double, *data.DoubleNull, data.Decimal, *data.DecimalNull, data.Numeric, *data.NumericNull, data.CreatedAt, data.UpdatedAt, data.Tinyint1, *data.Tinyint1Null, data.Year, *data.YearNull, data.Date, *data.DateNull, data.Time, *data.TimeNull, data.Datetime, *data.DatetimeNull, data.Timestamp, *data.TimestampNull, data.Char, *data.CharNull, data.Tinytext, *data.TinytextNull, data.Text, *data.TextNull, data.Mediumtext, *data.MediumtextNull, data.Longtext, *data.LongtextNull, data.Binary, *data.BinaryNull, data.Varbinary, *data.VarbinaryNull, data.Tinyblob, *data.TinyblobNull, data.Blob, *data.BlobNull, data.Mediumblob, *data.MediumblobNull, data.Longblob, *data.LongblobNull})
	}
	store := NewExtensiveStore(ctx, db)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkExtensiveSelectCols(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log: &zerolog.Logger{}}

	db, err := selectQuery(extensiveQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.Extensive{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{data.ID, *data.LongblobNull})
	}
	store := NewExtensiveStore(ctx, db).Columns(codegen.Extensive_ID, codegen.Extensive_LongblobNull)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

// ^^ END OF GENERATED BY CODEGEN. ^^
