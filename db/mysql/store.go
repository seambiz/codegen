package mysql

import (
	"database/sql"
	"math/big"

	"github.com/jmoiron/sqlx"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/seambiz/seambiz/sdb"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

// nolint[structcheck]
type Store struct {
	db           Execer
	withJoin     bool
	selectCalled bool
	joinType     string
	where        string
	orderBy      string
	groupBy      string
	prependField string
	limit        int
	offset       int
	batch        int
	row          int
	colSet       *big.Int
	stmt         *sdb.SQLStatement
}

// NewStore return DAO Storr
func NewStore(conn Execer) *Store {
	s := &Store{}
	s.db = conn
	s.stmt = sdb.NewSQLStatement()
	return s
}

func (s *Store) SQL(stmt string) *Store {
	s.stmt.Append(stmt)
	return s
}

func (s *Store) Select(columns string) *Store {
	s.stmt.Append("SELECT", columns)
	s.selectCalled = true
	return s
}

// QueryxInto uses sqlx.Select for raw SQL querying. Mapping uses tag (db) or field name.
func (s *Store) QueryxInto(dest interface{}, args ...interface{}) error {
	dbx := sqlx.NewDb(s.db.(*sql.DB), "mysql")
	log.Debug().Str("fn", "Store.QueryInto").Str("stmt", s.stmt.String()).Interface("args", args).Msg("sql")
	return dbx.Select(dest, s.stmt.Query(), args...)
}

// OnexInto uses sqlx.Get for raw SQL querying. Mapping uses tag (db) or field name.
func (s *Store) OnexInto(dest interface{}, args ...interface{}) error {
	dbx := sqlx.NewDb(s.db.(*sql.DB), "mysql")
	log.Debug().Str("fn", "Store.QueryInto").Str("stmt", s.stmt.String()).Interface("args", args).Msg("sql")
	return dbx.Get(dest, s.stmt.Query(), args...)
}

// Columns to be used for various statements.
func (s *Store) Columns(cols ...int) *Store {
	if s.stmt != nil && !s.selectCalled {
		s.stmt.Append("SELECT")
	}
	if s.colSet == nil {
		s.colSet = big.NewInt(0)
	}
	for _, col := range cols {
		s.colSet.SetBit(s.colSet, col, 1)
	}
	return s
}

func (s *Store) Fields(prefix string, fieldFunc func(*big.Int) []string) *Store {
	s.stmt.Fields(s.prependField, prefix, fieldFunc(s.colSet))
	s.prependField = ","
	return s
}

// queryBegin is a helper for other querying funcs.
func (s *Store) queryBegin(stmt string, args ...interface{}) (*sql.Rows, []sql.RawBytes, []interface{}, error) {
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "Store.One").Str("stmt", stmt).Interface("args", args).Msg("sql")
	}
	rows, err := s.db.Query(stmt, args...)
	if err != nil {
		log.Error().Err(err).Msg("query")
		return nil, nil, nil, err
	}
	colNames, err := rows.Columns()
	if err != nil {
		log.Error().Err(err).Msg("colNames")
		return nil, nil, nil, err
	}
	columnValues := make([]sql.RawBytes, len(colNames))
	columnPointers := make([]interface{}, len(colNames))
	for i := range columnValues {
		columnPointers[i] = &columnValues[i]
	}
	return rows, columnValues, columnPointers, err
}

// one is a helper for other stores' One's funcs.
func (s *Store) one(data Bindable, stmt *sdb.SQLStatement, args ...interface{}) error {
	rows, values, valuePointers, err := s.queryBegin(stmt.Query(), args...)
	if err != nil {
		return err
	}
	defer rows.Close()

	if rows.Next() {
		err = rows.Scan(valuePointers...)
		if err != nil {
			log.Error().Err(err).Msg("scan")
			return err
		}
		col := 0
		data.bind(values, s.withJoin, s.colSet, &col)
	} else {
		return sql.ErrNoRows
	}
	if err := rows.Close(); err != nil {
		return err
	}
	if err := rows.Err(); err != nil {
		return err
	}

	return nil
}

// MapScan gets a single row from a custom query.
func (s *Store) MapScan(dest map[string]sql.RawBytes, args ...interface{}) error {
	rows, values, valuePointers, err := s.queryBegin(s.stmt.Query(), args...)
	if err != nil {
		return err
	}
	defer rows.Close()

	if rows.Next() {
		err = rows.Scan(valuePointers...)
		if err != nil {
			log.Error().Err(err).Msg("scan")
			return err
		}

		var columns []string
		columns, err = rows.Columns()
		if err != nil {
			log.Error().Err(err).Msg("columns")
			return err
		}

		for i, column := range columns {
			dest[column] = values[i]
		}
	} else {
		return sql.ErrNoRows
	}
	if err := rows.Close(); err != nil {
		return err
	}
	if err := rows.Err(); err != nil {
		return err
	}

	return nil
}

// OneValue retrieves a single column from the first row as generic interface{}.
// Specify the bindFunc to map the DB return value to the correct type.
func (s *Store) OneValue(bindFunc func([]byte) interface{}, args ...interface{}) (interface{}, error) {
	rows, values, valuePointers, err := s.queryBegin(s.stmt.Query(), args...)
	if err != nil {
		return false, err
	}
	defer rows.Close()

	if rows.Next() {
		err = rows.Scan(valuePointers...)
		if err != nil {
			log.Error().Err(err).Msg("scan")
			return false, err
		}
		return bindFunc(values[0]), nil
	}
	return false, sql.ErrNoRows
}

// OneString retrieves a single column from the first row as string.
func (s *Store) OneString(args ...interface{}) (string, error) {
	v, err := s.OneValue(func(b []byte) interface{} {
		return sdb.ToString(b)
	}, args...)
	return v.(string), err
}

// OneInt retrieves a single column from the first row as int.
func (s *Store) OneInt(args ...interface{}) (int, error) {
	v, err := s.OneValue(func(b []byte) interface{} {
		return sdb.ToInt(b)
	}, args...)
	return v.(int), err
}

// OneBool retrieves a single column from the first row as bool.
func (s *Store) OneBool(args ...interface{}) (bool, error) {
	v, err := s.OneValue(func(b []byte) interface{} {
		return sdb.ToBool(b)
	}, args...)
	return v.(bool), err
}

// QueryCustom retrieves many rows from 'best.bestellung' as a slice of Bestellung with possible joined data.
func (s *Store) queryCustom(res BindableSlice, d Bindable, stmt string, args ...interface{}) error {
	rows, values, valuePointers, err := s.queryBegin(stmt, args...)
	if err != nil {
		return err
	}
	defer rows.Close()

	col := 0
	for rows.Next() {
		err = rows.Scan(valuePointers...)
		if err != nil {
			log.Error().Err(err).Msg("scan")
			return err
		}
		data := d.new()
		col = 0
		data.bind(values, s.withJoin, s.colSet, &col)
		res.append(data)
	}
	if err := rows.Close(); err != nil {
		return err
	}
	if err := rows.Err(); err != nil {
		return err
	}

	return nil
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
