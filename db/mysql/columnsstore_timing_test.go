package mysql

import (
	"database/sql/driver"
	"testing"

	"github.com/brianvoe/gofakeit/v5"
	"github.com/rs/zerolog"
	"github.com/seambiz/codegen"
)

// GENERATED BY CODEGEN.

func BenchmarkCOLUMNSInsert(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.COLUMNS{}
	store := NewCOLUMNSStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			err := store.Insert(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkCOLUMNSUpdate(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.COLUMNS{}
	store := NewCOLUMNSStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Update(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkCOLUMNSSelectAll(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := selectQuery(columnsQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.COLUMNS{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, data.TABLESCHEMA, data.TABLENAME, *data.COLUMNNAME, data.ORDINALPOSITION, *data.COLUMNDEFAULT, data.ISNULLABLE, *data.DATATYPE, *data.CHARACTERMAXIMUMLENGTH, *data.CHARACTEROCTETLENGTH, *data.NUMERICPRECISION, *data.NUMERICSCALE, *data.DATETIMEPRECISION, *data.CHARACTERSETNAME, *data.COLLATIONNAME, data.COLUMNTYPE, data.COLUMNKEY, *data.EXTRA, *data.PRIVILEGES, data.COLUMNCOMMENT, data.GENERATIONEXPRESSION})
	}
	store := NewCOLUMNSStore(ctx, db)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkCOLUMNSSelectCols(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}


	db, err := selectQuery(columnsQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.COLUMNS{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, data.GENERATIONEXPRESSION})
	}
	store := NewCOLUMNSStore(ctx, db).Columns(codegen.COLUMNS_TABLECATALOG, codegen.COLUMNS_GENERATIONEXPRESSION)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}



// ^^ END OF GENERATED BY CODEGEN. ^^
