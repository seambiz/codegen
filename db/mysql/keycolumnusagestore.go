package mysql

import (
	"database/sql"
	"io"
	"math/big"

	codegen "github.com/seambiz/codegen"

	"github.com/seambiz/seambiz/sdb"
)

// GENERATED BY CODEGEN.

// KEYCOLUMNUSAGE represents a row from 'KEY_COLUMN_USAGE'.
type KEYCOLUMNUSAGE struct {
	codegen.KEYCOLUMNUSAGE
}

// new implements Bindable.new
func (s *KEYCOLUMNUSAGE) new() Bindable {
	return &KEYCOLUMNUSAGE{}
}

// helper struct for common query operations.
type KEYCOLUMNUSAGESlice struct {
	data []*KEYCOLUMNUSAGE
}

// append implements BindableSlice.append
func (s *KEYCOLUMNUSAGESlice) append(d Bindable) {
	s.data = append(s.data, d.(*KEYCOLUMNUSAGE))
}



// constant slice for all fields of the table "KEYCOLUMNUSAGE".
// nolint[gochecknoglobals]
var keycolumnusageQueryFieldsAll = []string{"constraint_catalog" , "constraint_schema" , "constraint_name" , "table_catalog" , "table_schema" , "table_name" , "column_name" , "ordinal_position" , "position_in_unique_constraint" , "referenced_table_schema" , "referenced_table_name" , "referenced_column_name"}

// returns fields, that should be used.
// nolint[gocyclo]
func KEYCOLUMNUSAGEQueryFields(colSet *big.Int) []string {
	if colSet == nil {
		return keycolumnusageQueryFieldsAll
	}

	fields := []string{}
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTCATALOG) == 1 {
		fields = append(fields, "constraint_catalog")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTSCHEMA) == 1 {
		fields = append(fields, "constraint_schema")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTNAME) == 1 {
		fields = append(fields, "constraint_name")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLECATALOG) == 1 {
		fields = append(fields, "table_catalog")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLESCHEMA) == 1 {
		fields = append(fields, "table_schema")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLENAME) == 1 {
		fields = append(fields, "table_name")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_COLUMNNAME) == 1 {
		fields = append(fields, "column_name")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_ORDINALPOSITION) == 1 {
		fields = append(fields, "ordinal_position")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT) == 1 {
		fields = append(fields, "position_in_unique_constraint")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA) == 1 {
		fields = append(fields, "referenced_table_schema")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLENAME) == 1 {
		fields = append(fields, "referenced_table_name")
	}
	
    if colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME) == 1 {
		fields = append(fields, "referenced_column_name")
	}
	return fields
}
// KEYCOLUMNUSAGEStore is used to query for 'KEYCOLUMNUSAGE' records.
type KEYCOLUMNUSAGEStore struct {
	Store
	ctx *codegen.Context
}

// NewKEYCOLUMNUSAGEStore return DAO Store for KEYCOLUMNUSAGE
func NewKEYCOLUMNUSAGEStore(ctx *codegen.Context, conn Execer) *KEYCOLUMNUSAGEStore {
	s := &KEYCOLUMNUSAGEStore{}
	s.db = conn
	s.withJoin = true
	s.joinType = sdb.LEFT
	s.batch = 1000
	s.log = ctx.Log
	s.ctx = ctx
	return s
}

// WithoutJoins won't execute JOIN when querying for records.
func (s *KEYCOLUMNUSAGEStore) WithoutJoins() *KEYCOLUMNUSAGEStore {
	s.withJoin = false
	return s
}

// Where sets local sql, that will be appended to SELECT.
func (s *KEYCOLUMNUSAGEStore) Where(sql string) *KEYCOLUMNUSAGEStore {
	s.where = sql
	return s
}

// OrderBy sets local sql, that will be appended to SELECT.
func (s *KEYCOLUMNUSAGEStore) OrderBy(sql string) *KEYCOLUMNUSAGEStore {
	s.orderBy = sql
	return s
}

// GroupBy sets local sql, that will be appended to SELECT.
func (s *KEYCOLUMNUSAGEStore) GroupBy(sql string) *KEYCOLUMNUSAGEStore {
	s.groupBy = sql
	return s
}

// Limit result set size
func (s *KEYCOLUMNUSAGEStore) Limit(n int) *KEYCOLUMNUSAGEStore {
	s.limit = n
	return s
}

// Offset used, if a limit is provided
func (s *KEYCOLUMNUSAGEStore) Offset(n int) *KEYCOLUMNUSAGEStore {
	s.offset = n
	return s
}

// JoinType sets join statement type (Default: INNER | LEFT | RIGHT | OUTER).
func (s *KEYCOLUMNUSAGEStore) JoinType(jt string) *KEYCOLUMNUSAGEStore {
	s.joinType = jt
	return s
}

// Columns sets bits for specific columns.
func (s *KEYCOLUMNUSAGEStore) Columns(cols ...int) *KEYCOLUMNUSAGEStore {
	s.Store.Columns(cols...)
	return s
}

// SetBits sets complete BitSet for use in UpdatePartial.
func (s *KEYCOLUMNUSAGEStore) SetBits(colSet *big.Int) *KEYCOLUMNUSAGEStore {
	s.colSet = colSet
	return s
}
func (s *KEYCOLUMNUSAGE) bind(row []sql.RawBytes, withJoin bool, colSet *big.Int, col *int) {
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTCATALOG) == 1 {
		s.CONSTRAINTCATALOG = sdb.ToString(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTSCHEMA) == 1 {
		s.CONSTRAINTSCHEMA = sdb.ToString(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTNAME) == 1 {
		if row[*col] == nil {
			s.CONSTRAINTNAME = nil
			} else {
				s.CONSTRAINTNAME = new(string)
				*s.CONSTRAINTNAME = sdb.ToString(row[*col])
			}
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLECATALOG) == 1 {
		s.TABLECATALOG = sdb.ToString(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLESCHEMA) == 1 {
		s.TABLESCHEMA = sdb.ToString(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLENAME) == 1 {
		s.TABLENAME = sdb.ToString(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_COLUMNNAME) == 1 {
		if row[*col] == nil {
			s.COLUMNNAME = nil
			} else {
				s.COLUMNNAME = new(string)
				*s.COLUMNNAME = sdb.ToString(row[*col])
			}
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_ORDINALPOSITION) == 1 {
		s.ORDINALPOSITION = sdb.ToUInt(row[*col])
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT) == 1 {
		if row[*col] == nil {
			s.POSITIONINUNIQUECONSTRAINT = nil
			} else {
				s.POSITIONINUNIQUECONSTRAINT = new(uint)
				*s.POSITIONINUNIQUECONSTRAINT = sdb.ToUInt(row[*col])
			}
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA) == 1 {
		if row[*col] == nil {
			s.REFERENCEDTABLESCHEMA = nil
			} else {
				s.REFERENCEDTABLESCHEMA = new(string)
				*s.REFERENCEDTABLESCHEMA = sdb.ToString(row[*col])
			}
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLENAME) == 1 {
		if row[*col] == nil {
			s.REFERENCEDTABLENAME = nil
			} else {
				s.REFERENCEDTABLENAME = new(string)
				*s.REFERENCEDTABLENAME = sdb.ToString(row[*col])
			}
		*col++
	}
    if colSet == nil || colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME) == 1 {
		if row[*col] == nil {
			s.REFERENCEDCOLUMNNAME = nil
			} else {
				s.REFERENCEDCOLUMNNAME = new(string)
				*s.REFERENCEDCOLUMNNAME = sdb.ToString(row[*col])
			}
		*col++
	}}

func (s *KEYCOLUMNUSAGEStore) selectStatement() *sdb.SQLStatement {
	sql := sdb.NewSQLStatement()
	sql.Append("SELECT")
	sql.Fields("", "A", KEYCOLUMNUSAGEQueryFields(s.colSet))
			sql.Append(" FROM information_schema.KEY_COLUMN_USAGE A ")	
	if s.where != "" {
	    sql.Append("WHERE", s.where)
	}
	if s.groupBy != "" {
	    sql.Append("GROUP BY", s.groupBy)
	}
	if s.orderBy != "" {
	    sql.Append("ORDER BY", s.orderBy)
	}
	if s.limit > 0 {
	    sql.AppendRaw("LIMIT ", s.limit)
        if s.offset > 0 {
            sql.AppendRaw(",", s.offset)
        }
	}
	return sql
}
// QueryCustom retrieves many rows from 'information_schema.KEY_COLUMN_USAGE' as a slice of KEYCOLUMNUSAGE with 1:1 joined data.
func (s *KEYCOLUMNUSAGEStore) QueryCustom(stmt string, args ...interface{}) ([]*codegen.KEYCOLUMNUSAGE, error) {
    dto := &KEYCOLUMNUSAGE{}
    data := &KEYCOLUMNUSAGESlice{}
    err := s.queryCustom(data, dto, stmt, args...)
    if err != nil {
        s.log.Error().Err(err).Msg("querycustom")
        return nil, err
    }
    retValues := make([]*codegen.KEYCOLUMNUSAGE, len(data.data))
    for i := range data.data {
        retValues[i] = &data.data[i].KEYCOLUMNUSAGE
    }
    return retValues, nil
}
// One retrieves a row from 'information_schema.KEY_COLUMN_USAGE' as a KEYCOLUMNUSAGE with 1:1 joined data.
func (s *KEYCOLUMNUSAGEStore) One(args ...interface{}) (*codegen.KEYCOLUMNUSAGE, error) {
    data := &KEYCOLUMNUSAGE{}

 	err := s.one(data, s.selectStatement(), args...)
	if err != nil {
        s.log.Error().Err(err).Msg("query one")
        return nil, err
	}
	return &data.KEYCOLUMNUSAGE, nil
}
// Query retrieves many rows from 'information_schema.KEY_COLUMN_USAGE' as a slice of KEYCOLUMNUSAGE with 1:1 joined data.
func (s *KEYCOLUMNUSAGEStore) Query(args ...interface{}) ([]*codegen.KEYCOLUMNUSAGE, error) {
	stmt := s.selectStatement()
	return s.QueryCustom(stmt.Query(), args...)
}



// kEYCOLUMNUSAGEUpsertStmt helper for generating Upsert statement.
// nolint:gocyclo
func (s *KEYCOLUMNUSAGEStore) kEYCOLUMNUSAGEUpsertStmt() *sdb.UpsertStatement {
	upsert := []string{}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTCATALOG) == 1 {
			    upsert = append(upsert, "constraint_catalog = VALUES(constraint_catalog)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTSCHEMA) == 1 {
			    upsert = append(upsert, "constraint_schema = VALUES(constraint_schema)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTNAME) == 1 {
			    upsert = append(upsert, "constraint_name = VALUES(constraint_name)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLECATALOG) == 1 {
			    upsert = append(upsert, "table_catalog = VALUES(table_catalog)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLESCHEMA) == 1 {
			    upsert = append(upsert, "table_schema = VALUES(table_schema)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLENAME) == 1 {
			    upsert = append(upsert, "table_name = VALUES(table_name)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_COLUMNNAME) == 1 {
			    upsert = append(upsert, "column_name = VALUES(column_name)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_ORDINALPOSITION) == 1 {
			    upsert = append(upsert, "ordinal_position = VALUES(ordinal_position)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT) == 1 {
			    upsert = append(upsert, "position_in_unique_constraint = VALUES(position_in_unique_constraint)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA) == 1 {
			    upsert = append(upsert, "referenced_table_schema = VALUES(referenced_table_schema)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLENAME) == 1 {
			    upsert = append(upsert, "referenced_table_name = VALUES(referenced_table_name)")
			}
        	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME) == 1 {
			    upsert = append(upsert, "referenced_column_name = VALUES(referenced_column_name)")
			}
	sql := &sdb.UpsertStatement{}
		sql.InsertInto("information_schema.KEY_COLUMN_USAGE")
	sql.Columns("constraint_catalog","constraint_schema","constraint_name","table_catalog","table_schema","table_name","column_name","ordinal_position","position_in_unique_constraint","referenced_table_schema","referenced_table_name","referenced_column_name",)
    sql.OnDuplicateKeyUpdate(upsert)
	return sql	
}

// Upsert executes upsert for array of KEYCOLUMNUSAGE
func (s *KEYCOLUMNUSAGEStore) Upsert(data ...*codegen.KEYCOLUMNUSAGE) (int64, error) {
	sql := s.kEYCOLUMNUSAGEUpsertStmt()
	
	for _, d := range data {
		sql.Record(d)
	}

	if s.log.Trace().Enabled() {
		s.log.Trace().Str("fn", "KEYCOLUMNUSAGEUpsert").Str("stmt", sql.String()).Msg("sql")
	}
	res, err := s.db.Exec(sql.Query())
	if err != nil {
		s.log.Error().Err(err).Msg("exec")
		return -1, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		s.log.Error().Err(err).Msg("rowsaffected")
		return -1, err
	}

	return affected, nil
}

// Insert inserts the KEYCOLUMNUSAGE to the database.
func (s *KEYCOLUMNUSAGEStore) Insert(data *codegen.KEYCOLUMNUSAGE) error {
    var err error
    sql := sdb.NewSQLStatement()
		sql.AppendRaw("INSERT INTO information_schema.KEY_COLUMN_USAGE (")
	fields := KEYCOLUMNUSAGEQueryFields(s.colSet)
	sql.Fields("", "", fields)
	sql.Append(") VALUES (")
	for i := range fields {
	    if i > 0 {
	        sql.Append(",")
	    }
	    sql.Append("?")
	}
	sql.Append(")")
	
	if s.log.Trace().Enabled() {
	    s.log.Trace().Str("fn", "information_schema.KEY_COLUMN_USAGE.Insert").Str("stmt", sql.String()).Str("CONSTRAINTCATALOG", data.CONSTRAINTCATALOG).Str("CONSTRAINTSCHEMA", data.CONSTRAINTSCHEMA).Str("CONSTRAINTNAME", logString(data.CONSTRAINTNAME)).Str("TABLECATALOG", data.TABLECATALOG).Str("TABLESCHEMA", data.TABLESCHEMA).Str("TABLENAME", data.TABLENAME).Str("COLUMNNAME", logString(data.COLUMNNAME)).Uint("ORDINALPOSITION", data.ORDINALPOSITION).Uint("POSITIONINUNIQUECONSTRAINT", logUInt(data.POSITIONINUNIQUECONSTRAINT)).Str("REFERENCEDTABLESCHEMA", logString(data.REFERENCEDTABLESCHEMA)).Str("REFERENCEDTABLENAME", logString(data.REFERENCEDTABLENAME)).Str("REFERENCEDCOLUMNNAME", logString(data.REFERENCEDCOLUMNNAME)).Msg("sql")
    }
		_, err =s.db.Exec(sql.Query(),data.CONSTRAINTCATALOG,data.CONSTRAINTSCHEMA,data.CONSTRAINTNAME,data.TABLECATALOG,data.TABLESCHEMA,data.TABLENAME,data.COLUMNNAME,data.ORDINALPOSITION,data.POSITIONINUNIQUECONSTRAINT,data.REFERENCEDTABLESCHEMA,data.REFERENCEDTABLENAME,data.REFERENCEDCOLUMNNAME)
	if err != nil {
		s.log.Error().Err(err).Msg("exec")
		return err
	}
	return nil
}

// Update updates the KEYCOLUMNUSAGE in the database.
// nolint[gocyclo]
func (s *KEYCOLUMNUSAGEStore) Update(data *codegen.KEYCOLUMNUSAGE) (int64, error) {
    sql := sdb.NewSQLStatement()
    var prepend string
    args := []interface{}{}
        sql.Append("UPDATE information_schema.KEY_COLUMN_USAGE SET")
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTCATALOG) == 1 {
            sql.AppendRaw(prepend, "constraint_catalog = ?")
                prepend = ","
            args = append(args, data.CONSTRAINTCATALOG)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTSCHEMA) == 1 {
            sql.AppendRaw(prepend, "constraint_schema = ?")
                prepend = ","
            args = append(args, data.CONSTRAINTSCHEMA)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTNAME) == 1 {
            sql.AppendRaw(prepend, "constraint_name = ?")
                prepend = ","
            args = append(args, data.CONSTRAINTNAME)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLECATALOG) == 1 {
            sql.AppendRaw(prepend, "table_catalog = ?")
                prepend = ","
            args = append(args, data.TABLECATALOG)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLESCHEMA) == 1 {
            sql.AppendRaw(prepend, "table_schema = ?")
                prepend = ","
            args = append(args, data.TABLESCHEMA)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLENAME) == 1 {
            sql.AppendRaw(prepend, "table_name = ?")
                prepend = ","
            args = append(args, data.TABLENAME)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_COLUMNNAME) == 1 {
            sql.AppendRaw(prepend, "column_name = ?")
                prepend = ","
            args = append(args, data.COLUMNNAME)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_ORDINALPOSITION) == 1 {
            sql.AppendRaw(prepend, "ordinal_position = ?")
                prepend = ","
            args = append(args, data.ORDINALPOSITION)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT) == 1 {
            sql.AppendRaw(prepend, "position_in_unique_constraint = ?")
                prepend = ","
            args = append(args, data.POSITIONINUNIQUECONSTRAINT)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA) == 1 {
            sql.AppendRaw(prepend, "referenced_table_schema = ?")
                prepend = ","
            args = append(args, data.REFERENCEDTABLESCHEMA)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLENAME) == 1 {
            sql.AppendRaw(prepend, "referenced_table_name = ?")
                prepend = ","
            args = append(args, data.REFERENCEDTABLENAME)
        }
        if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME) == 1 {
            sql.AppendRaw(prepend, "referenced_column_name = ?")
            args = append(args, data.REFERENCEDCOLUMNNAME)
        }
    sql.Append(" WHERE ")
	if s.log.Trace().Enabled() {
		s.log.Trace().Str("fn", "information_schema.KEY_COLUMN_USAGE.Update").Str("stmt", sql.String()).Interface("args", args).Msg("sql")
	}
	res, err := s.db.Exec(sql.Query(), args...)
	if err != nil {
		s.log.Error().Err(err).Msg("exec")
		return 0, err
	}
	return res.RowsAffected()
}
// Truncate deletes all rows from KEYCOLUMNUSAGE.
func (s *KEYCOLUMNUSAGEStore) Truncate() error {
	sql := sdb.NewSQLStatement()
		sql.Append("TRUNCATE information_schema.KEY_COLUMN_USAGE")
	if s.log.Trace().Enabled() {
		s.log.Trace().Str("fn", "information_schema.KEY_COLUMN_USAGE.Truncate").Str("stmt", sql.String()).Msg("sql")
	}
	_, err := s.db.Exec(sql.Query())
	if err != nil {
	    s.log.Error().Err(err).Msg("exec")
	}
	return err
}



// ToJSON writes a single object to the buffer.
// nolint[gocylco]
func (s *KEYCOLUMNUSAGEStore) ToJSON(t *sdb.JsonBuffer, data *KEYCOLUMNUSAGE) {
	prepend := "{"
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTCATALOG) == 1 {
			t.JS(prepend, "constraint_catalog", data.CONSTRAINTCATALOG)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTSCHEMA) == 1 {
			t.JS(prepend, "constraint_schema", data.CONSTRAINTSCHEMA)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_CONSTRAINTNAME) == 1 {
			t.JS(prepend, "constraint_name", *data.CONSTRAINTNAME)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLECATALOG) == 1 {
			t.JS(prepend, "table_catalog", data.TABLECATALOG)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLESCHEMA) == 1 {
			t.JS(prepend, "table_schema", data.TABLESCHEMA)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_TABLENAME) == 1 {
			t.JS(prepend, "table_name", data.TABLENAME)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_COLUMNNAME) == 1 {
			t.JS(prepend, "column_name", *data.COLUMNNAME)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_ORDINALPOSITION) == 1 {
			t.JDu(prepend, "ordinal_position", data.ORDINALPOSITION)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_POSITIONINUNIQUECONSTRAINT) == 1 {
			t.JDu(prepend, "position_in_unique_constraint", *data.POSITIONINUNIQUECONSTRAINT)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLESCHEMA) == 1 {
			t.JS(prepend, "referenced_table_schema", *data.REFERENCEDTABLESCHEMA)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDTABLENAME) == 1 {
			t.JS(prepend, "referenced_table_name", *data.REFERENCEDTABLENAME)
			prepend = ","
		}
	if s.colSet == nil || s.colSet.Bit(codegen.KEYCOLUMNUSAGE_REFERENCEDCOLUMNNAME) == 1 {
			t.JS(prepend, "referenced_column_name", *data.REFERENCEDCOLUMNNAME)
		}
	t.S(`}`)
}

// ToJSONArray writes a slice to the named array.
func (s *KEYCOLUMNUSAGEStore) ToJSONArray(w io.Writer, data []*KEYCOLUMNUSAGE, name string) {
	t := sdb.NewJsonBuffer()
	t.SS(`{"`, name, `":[`)
	for i := range data {
		if i > 0 {
			t.S(",")
		}
		s.ToJSON(t, data[i])
	}

	t.S("]}")
	_, err := w.Write(t.Bytes())
	if err != nil {
		panic(err)
	}
}
// ^^ END OF GENERATED BY CODEGEN. ^^
