package mysql

import (
	"database/sql/driver"
	"testing"

	"github.com/brianvoe/gofakeit/v5"
	"github.com/rs/zerolog"
	codegen "github.com/seambiz/codegen"
)

// GENERATED BY CODEGEN.

func BenchmarkTABLESInsert(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.TABLES{}
	store := NewTABLESStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			err := store.Insert(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkTABLESUpdate(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.TABLES{}
	store := NewTABLESStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Update(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkTABLESSelectAll(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := selectQuery(tablesQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.TABLES{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, data.TABLESCHEMA, data.TABLENAME, data.TABLETYPE, *data.ENGINE, *data.VERSION, *data.ROWFORMAT, *data.TABLEROWS, *data.AVGROWLENGTH, *data.DATALENGTH, *data.MAXDATALENGTH, *data.INDEXLENGTH, *data.DATAFREE, *data.AUTOINCREMENT, data.CREATETIME, *data.UPDATETIME, *data.CHECKTIME, *data.TABLECOLLATION, *data.CHECKSUM, *data.CREATEOPTIONS, *data.TABLECOMMENT})
	}
	store := NewTABLESStore(ctx, db)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkTABLESSelectCols(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}


	db, err := selectQuery(tablesQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.TABLES{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, *data.TABLECOMMENT})
	}
	store := NewTABLESStore(ctx, db).Columns(codegen.TABLES_TABLECATALOG, codegen.TABLES_TABLECOMMENT)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}



// ^^ END OF GENERATED BY CODEGEN. ^^
