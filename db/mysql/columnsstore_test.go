package mysql

import (
	"testing"

	"bitbucket.org/codegen"
	"github.com/DATA-DOG/go-sqlmock"
	"github.com/rs/zerolog"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

// Insert inserts the Columns to the database.
func TestColumnsInsert(t *testing.T) {
	ctx := &codegen.BaseContext{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("INSERT INTO information_schema.COLUMNS (table_catalog, table_schema, table_name, column_name, ordinal_position, column_default, is_nullable, data_type, character_maximum_length, character_octet_length, numeric_precision, numeric_scale, datetime_precision, character_set_name, collation_name, column_type, column_key, extra, privileges, column_comment, generation_expression, srs_id) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )").
		WithArgs("", "", "", nil, 0, nil, "", nil, nil, nil, nil, nil, nil, nil, nil, "", "", nil, nil, "", "", nil).
		WillReturnResult(sqlmock.NewResult(1, 1))
	store := NewColumnsStore(ctx, db)
	err = store.Insert(&codegen.Columns{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}

func TestColumnsUpdate(t *testing.T) {
	ctx := &codegen.BaseContext{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("UPDATE information_schema.COLUMNS SET table_catalog = ?,table_schema = ?,table_name = ?,column_name = ?,ordinal_position = ?,column_default = ?,is_nullable = ?,data_type = ?,character_maximum_length = ?,character_octet_length = ?,numeric_precision = ?,numeric_scale = ?,datetime_precision = ?,character_set_name = ?,collation_name = ?,column_type = ?,column_key = ?,extra = ?,privileges = ?,column_comment = ?,generation_expression = ?,srs_id = ? WHERE ").
		WithArgs("", "", "", nil, 0, nil, "", nil, nil, nil, nil, nil, nil, nil, nil, "", "", nil, nil, "", "", nil).
		WillReturnResult(sqlmock.NewResult(0, 1))
	store := NewColumnsStore(ctx, db)
	aff, err := store.Update(&codegen.Columns{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

func TestColumnsSelectWithoutJoin(t *testing.T) {
	ctx := &codegen.BaseContext{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	rows := sqlmock.NewRows([]string{"A.table_catalog", "A.table_schema", "A.table_name", "A.column_name", "A.ordinal_position", "A.column_default", "A.is_nullable", "A.data_type", "A.character_maximum_length", "A.character_octet_length", "A.numeric_precision", "A.numeric_scale", "A.datetime_precision", "A.character_set_name", "A.collation_name", "A.column_type", "A.column_key", "A.extra", "A.privileges", "A.column_comment", "A.generation_expression", "A.srs_id"}).
		AddRow("", "", "", nil, 0, nil, "", nil, nil, nil, nil, nil, nil, nil, nil, "", "", nil, nil, "", "", nil).
		AddRow("", "", "", nil, 0, nil, "", nil, nil, nil, nil, nil, nil, nil, nil, "", "", nil, nil, "", "", nil)

	mock.ExpectQuery("SELECT A.table_catalog, A.table_schema, A.table_name, A.column_name, A.ordinal_position, A.column_default, A.is_nullable, A.data_type, A.character_maximum_length, A.character_octet_length, A.numeric_precision, A.numeric_scale, A.datetime_precision, A.character_set_name, A.collation_name, A.column_type, A.column_key, A.extra, A.privileges, A.column_comment, A.generation_expression, A.srs_id FROM information_schema.COLUMNS A").
		WillReturnRows(rows)
	store := NewColumnsStore(ctx, db).WithoutJoins()
	data, err := store.Query()
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}

	if len(data) != 2 {
		t.Errorf("number of rows != 2: %d", len(data))
	}
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
