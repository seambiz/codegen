package mysql

import (
	"database/sql"
	"errors"
	"fmt"
	"io"
	"math/big"
	"reflect"
	"strings"
	"time"

	codegen "bitbucket.org/codegen"

	"github.com/fatih/structs"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/seambiz/seambiz/sdb"
	"github.com/seambiz/seambiz/stime"
)

// EscapeString returns mysql escaped string
func EscapeString(sql string) string {
	replacer := strings.NewReplacer("\\", "\\\\",
		"'", "\\'",
		"\\0", "\\\\0",
		"\n", "\\n",
		"\r", "\\r",
		`"`, `\"`,
		"\xef\xbf\xbd", "",
		"\x1a", "\\Z")

	return replacer.Replace(sql)
}

// UpsertStatement helper for creating upsert statement
type UpsertStatement struct {
	sql                  *sdb.SQLStatement
	onduplicatekeyupdate string
	columns              []string
	appended             bool
	recordSet            bool
}

func (u *UpsertStatement) appendOnDuplicateKey() {
	if !u.appended && u.recordSet {
		u.sql.Append(" ON DUPLICATE KEY UPDATE")
		u.sql.Append(u.onduplicatekeyupdate)
		u.appended = true
	}
}

// String return sql statement
func (u *UpsertStatement) String() string {
	u.appendOnDuplicateKey()
	return u.sql.String()
}

// Query frees the buffer aufter return sql string
func (u *UpsertStatement) Query() string {
	u.appendOnDuplicateKey()
	return u.sql.Query()
}

// InsertInto table name
func (u *UpsertStatement) InsertInto(table string) {
	u.sql = sdb.NewSQLStatement()
	u.onduplicatekeyupdate = ""

	u.sql.Append("INSERT INTO")
	u.sql.Append(table)
}

// Columns to be inserted
func (u *UpsertStatement) Columns(cols ...string) {
	u.columns = cols
	u.sql.Append("(")

	for i, col := range cols {
		u.sql.Append("`" + col + "`")
		if i < len(cols)-1 {
			u.sql.Append(",")
		}
	}

	u.sql.Append(") VALUES ")
}

// ColumnsByStruct convinience function
func (u *UpsertStatement) ColumnsByStruct(v interface{}) {
	var cols []string

	for _, f := range structs.New(v).Fields() {
		tag := f.Tag("db")
		switch tag {
		case "-":
			continue
		case "":
			cols = append(cols, f.Name())
		default:
			cols = append(cols, f.Tag("db"))
		}
	}
	u.Columns(cols...)
}

// OnDuplicateKeyUpdate what to do
func (u *UpsertStatement) OnDuplicateKeyUpdate(sqls []string) {
	u.onduplicatekeyupdate = strings.Join(sqls, ",")
}

// Record to be added to the statement
func (u *UpsertStatement) Record(values interface{}) {
	s := structs.New(values)
	s.TagName = "db"
	m := s.Map()
	u.recordSet = true

	u.sql.Append("(")

	for i, col := range u.columns {
		if reflect.ValueOf(m[col]).Kind() == reflect.Ptr {
			if reflect.ValueOf(m[col]).IsNil() {
				u.sql.Append("NULL")
			} else {
				u.sql.Append("'" + EscapeString(fmt.Sprint(reflect.Indirect(reflect.ValueOf(m[col])))) + "'")
			}
		} else {
			u.sql.Append("'" + EscapeString(fmt.Sprint(m[col])) + "'")
		}

		if i < len(u.columns)-1 {
			u.sql.Append(",")
		}
	}

	u.sql.Append("),")
}

// GENERATED BY CODEGEN. DO NOT EDIT.

// Extensive represents a row from 'extensive'.
type Extensive struct {
	codegen.Extensive
}

// new implements Bindable.new
func (ex *Extensive) new() Bindable {
	return &Extensive{}
}

// helper struct for common query operations.
type ExtensiveSlice struct {
	data []*Extensive
}

// append implements BindableSlice.append
func (ex *ExtensiveSlice) append(d Bindable) {
	ex.data = append(ex.data, d.(*Extensive))
}

// constant slice for all fields of the table "Extensive".
// nolint[gochecknoglobals]
var extensiveQueryFieldsAll = []string{"id", "tinyint", "tinyint_unsigned", "tinyint_null", "smallint", "smallint_unsigned", "smallint_null", "int", "int_null", "int_unsigned", "bigint", "bigint_null", "bigint_unsigned", "varchar", "varchar_null", "float", "float_null", "double", "double_null", "decimal", "decimal_null", "numeric", "numeric_null", "created_at", "updated_at", "tinyint1", "tinyint1_null", "year", "year_null", "date", "date_null", "time", "time_null", "datetime", "datetime_null", "timestamp", "timestamp_null", "char", "char_null", "tinytext", "tinytext_null", "text", "text_null", "mediumtext", "mediumtext_null", "longtext", "longtext_null", "binary", "binary_null", "varbinary", "varbinary_null", "tinyblob", "tinyblob_null", "blob", "blob_null", "mediumblob", "mediumblob_null", "longblob", "longblob_null"}

// returns fields, that should be used.
// nolint[gocyclo]
func ExtensiveQueryFields(colSet *big.Int) []string {
	if colSet == nil {
		return extensiveQueryFieldsAll
	}

	fields := []string{}
	if colSet.Bit(codegen.Extensive_ID) == 1 {
		fields = append(fields, "id")
	}

	if colSet.Bit(codegen.Extensive_Tinyint) == 1 {
		fields = append(fields, "tinyint")
	}

	if colSet.Bit(codegen.Extensive_TinyintUnsigned) == 1 {
		fields = append(fields, "tinyint_unsigned")
	}

	if colSet.Bit(codegen.Extensive_TinyintNull) == 1 {
		fields = append(fields, "tinyint_null")
	}

	if colSet.Bit(codegen.Extensive_Smallint) == 1 {
		fields = append(fields, "smallint")
	}

	if colSet.Bit(codegen.Extensive_SmallintUnsigned) == 1 {
		fields = append(fields, "smallint_unsigned")
	}

	if colSet.Bit(codegen.Extensive_SmallintNull) == 1 {
		fields = append(fields, "smallint_null")
	}

	if colSet.Bit(codegen.Extensive_Int) == 1 {
		fields = append(fields, "int")
	}

	if colSet.Bit(codegen.Extensive_IntNull) == 1 {
		fields = append(fields, "int_null")
	}

	if colSet.Bit(codegen.Extensive_IntUnsigned) == 1 {
		fields = append(fields, "int_unsigned")
	}

	if colSet.Bit(codegen.Extensive_Bigint) == 1 {
		fields = append(fields, "bigint")
	}

	if colSet.Bit(codegen.Extensive_BigintNull) == 1 {
		fields = append(fields, "bigint_null")
	}

	if colSet.Bit(codegen.Extensive_BigintUnsigned) == 1 {
		fields = append(fields, "bigint_unsigned")
	}

	if colSet.Bit(codegen.Extensive_Varchar) == 1 {
		fields = append(fields, "varchar")
	}

	if colSet.Bit(codegen.Extensive_VarcharNull) == 1 {
		fields = append(fields, "varchar_null")
	}

	if colSet.Bit(codegen.Extensive_Float) == 1 {
		fields = append(fields, "float")
	}

	if colSet.Bit(codegen.Extensive_FloatNull) == 1 {
		fields = append(fields, "float_null")
	}

	if colSet.Bit(codegen.Extensive_Double) == 1 {
		fields = append(fields, "double")
	}

	if colSet.Bit(codegen.Extensive_DoubleNull) == 1 {
		fields = append(fields, "double_null")
	}

	if colSet.Bit(codegen.Extensive_Decimal) == 1 {
		fields = append(fields, "decimal")
	}

	if colSet.Bit(codegen.Extensive_DecimalNull) == 1 {
		fields = append(fields, "decimal_null")
	}

	if colSet.Bit(codegen.Extensive_Numeric) == 1 {
		fields = append(fields, "numeric")
	}

	if colSet.Bit(codegen.Extensive_NumericNull) == 1 {
		fields = append(fields, "numeric_null")
	}

	if colSet.Bit(codegen.Extensive_CreatedAt) == 1 {
		fields = append(fields, "created_at")
	}

	if colSet.Bit(codegen.Extensive_UpdatedAt) == 1 {
		fields = append(fields, "updated_at")
	}

	if colSet.Bit(codegen.Extensive_Tinyint1) == 1 {
		fields = append(fields, "tinyint1")
	}

	if colSet.Bit(codegen.Extensive_Tinyint1Null) == 1 {
		fields = append(fields, "tinyint1_null")
	}

	if colSet.Bit(codegen.Extensive_Year) == 1 {
		fields = append(fields, "year")
	}

	if colSet.Bit(codegen.Extensive_YearNull) == 1 {
		fields = append(fields, "year_null")
	}

	if colSet.Bit(codegen.Extensive_Date) == 1 {
		fields = append(fields, "date")
	}

	if colSet.Bit(codegen.Extensive_DateNull) == 1 {
		fields = append(fields, "date_null")
	}

	if colSet.Bit(codegen.Extensive_Time) == 1 {
		fields = append(fields, "time")
	}

	if colSet.Bit(codegen.Extensive_TimeNull) == 1 {
		fields = append(fields, "time_null")
	}

	if colSet.Bit(codegen.Extensive_Datetime) == 1 {
		fields = append(fields, "datetime")
	}

	if colSet.Bit(codegen.Extensive_DatetimeNull) == 1 {
		fields = append(fields, "datetime_null")
	}

	if colSet.Bit(codegen.Extensive_Timestamp) == 1 {
		fields = append(fields, "timestamp")
	}

	if colSet.Bit(codegen.Extensive_TimestampNull) == 1 {
		fields = append(fields, "timestamp_null")
	}

	if colSet.Bit(codegen.Extensive_Char) == 1 {
		fields = append(fields, "char")
	}

	if colSet.Bit(codegen.Extensive_CharNull) == 1 {
		fields = append(fields, "char_null")
	}

	if colSet.Bit(codegen.Extensive_Tinytext) == 1 {
		fields = append(fields, "tinytext")
	}

	if colSet.Bit(codegen.Extensive_TinytextNull) == 1 {
		fields = append(fields, "tinytext_null")
	}

	if colSet.Bit(codegen.Extensive_Text) == 1 {
		fields = append(fields, "text")
	}

	if colSet.Bit(codegen.Extensive_TextNull) == 1 {
		fields = append(fields, "text_null")
	}

	if colSet.Bit(codegen.Extensive_Mediumtext) == 1 {
		fields = append(fields, "mediumtext")
	}

	if colSet.Bit(codegen.Extensive_MediumtextNull) == 1 {
		fields = append(fields, "mediumtext_null")
	}

	if colSet.Bit(codegen.Extensive_Longtext) == 1 {
		fields = append(fields, "longtext")
	}

	if colSet.Bit(codegen.Extensive_LongtextNull) == 1 {
		fields = append(fields, "longtext_null")
	}

	if colSet.Bit(codegen.Extensive_Binary) == 1 {
		fields = append(fields, "binary")
	}

	if colSet.Bit(codegen.Extensive_BinaryNull) == 1 {
		fields = append(fields, "binary_null")
	}

	if colSet.Bit(codegen.Extensive_Varbinary) == 1 {
		fields = append(fields, "varbinary")
	}

	if colSet.Bit(codegen.Extensive_VarbinaryNull) == 1 {
		fields = append(fields, "varbinary_null")
	}

	if colSet.Bit(codegen.Extensive_Tinyblob) == 1 {
		fields = append(fields, "tinyblob")
	}

	if colSet.Bit(codegen.Extensive_TinyblobNull) == 1 {
		fields = append(fields, "tinyblob_null")
	}

	if colSet.Bit(codegen.Extensive_Blob) == 1 {
		fields = append(fields, "blob")
	}

	if colSet.Bit(codegen.Extensive_BlobNull) == 1 {
		fields = append(fields, "blob_null")
	}

	if colSet.Bit(codegen.Extensive_Mediumblob) == 1 {
		fields = append(fields, "mediumblob")
	}

	if colSet.Bit(codegen.Extensive_MediumblobNull) == 1 {
		fields = append(fields, "mediumblob_null")
	}

	if colSet.Bit(codegen.Extensive_Longblob) == 1 {
		fields = append(fields, "longblob")
	}

	if colSet.Bit(codegen.Extensive_LongblobNull) == 1 {
		fields = append(fields, "longblob_null")
	}
	return fields
}

// ExtensiveStore is used to query for 'Extensive' records.
type ExtensiveStore struct {
	Store
}

// NewExtensiveStore return DAO Store for Extensive
func NewExtensiveStore(conn Execer) *ExtensiveStore {
	ex := &ExtensiveStore{}
	ex.db = conn
	ex.withJoin = true
	ex.joinType = sdb.LEFT
	ex.batch = 1000
	return ex
}

// WithoutJoins won't execute JOIN when querying for records.
func (ex *ExtensiveStore) WithoutJoins() *ExtensiveStore {
	ex.withJoin = false
	return ex
}

// Where sets local sql, that will be appended to SELECT.
func (ex *ExtensiveStore) Where(sql string) *ExtensiveStore {
	ex.where = sql
	return ex
}

// OrderBy sets local sql, that will be appended to SELECT.
func (ex *ExtensiveStore) OrderBy(sql string) *ExtensiveStore {
	ex.orderBy = sql
	return ex
}

// GroupBy sets local sql, that will be appended to SELECT.
func (ex *ExtensiveStore) GroupBy(sql string) *ExtensiveStore {
	ex.groupBy = sql
	return ex
}

// Limit result set size
func (ex *ExtensiveStore) Limit(n int) *ExtensiveStore {
	ex.limit = n
	return ex
}

// Offset used, if a limit is provided
func (ex *ExtensiveStore) Offset(n int) *ExtensiveStore {
	ex.offset = n
	return ex
}

// JoinType sets join statement type (Default: INNER | LEFT | RIGHT | OUTER).
func (ex *ExtensiveStore) JoinType(jt string) *ExtensiveStore {
	ex.joinType = jt
	return ex
}

// Columns sets bits for specific columns.
func (ex *ExtensiveStore) Columns(cols ...int) *ExtensiveStore {
	ex.Store.Columns(cols...)
	return ex
}

// SetBits sets complete BitSet for use in UpdatePartial.
func (ex *ExtensiveStore) SetBits(colSet *big.Int) *ExtensiveStore {
	ex.colSet = colSet
	return ex
}

func (ex *Extensive) bind(row []sql.RawBytes, withJoin bool, colSet *big.Int, col *int) {
	BindFakeBenchmarkExtensive(&ex.Extensive, row, withJoin, colSet, col)
}

// nolint:gocyclo
func BindFakeBenchmarkExtensive(ex *codegen.Extensive, row []sql.RawBytes, withJoin bool, colSet *big.Int, col *int) {
	if colSet == nil || colSet.Bit(codegen.Extensive_ID) == 1 {
		ex.ID = sdb.ToInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Tinyint) == 1 {
		ex.Tinyint = sdb.ToInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TinyintUnsigned) == 1 {
		ex.TinyintUnsigned = sdb.ToUInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TinyintNull) == 1 {
		if row[*col] == nil {
			ex.TinyintNull = nil
		} else {
			ex.TinyintNull = new(int)
			*ex.TinyintNull = sdb.ToInt(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Smallint) == 1 {
		ex.Smallint = sdb.ToInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_SmallintUnsigned) == 1 {
		ex.SmallintUnsigned = sdb.ToUInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_SmallintNull) == 1 {
		if row[*col] == nil {
			ex.SmallintNull = nil
		} else {
			ex.SmallintNull = new(int)
			*ex.SmallintNull = sdb.ToInt(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Int) == 1 {
		ex.Int = sdb.ToInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_IntNull) == 1 {
		if row[*col] == nil {
			ex.IntNull = nil
		} else {
			ex.IntNull = new(int)
			*ex.IntNull = sdb.ToInt(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_IntUnsigned) == 1 {
		ex.IntUnsigned = sdb.ToUInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Bigint) == 1 {
		ex.Bigint = sdb.ToInt64(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_BigintNull) == 1 {
		if row[*col] == nil {
			ex.BigintNull = nil
		} else {
			ex.BigintNull = new(int64)
			*ex.BigintNull = sdb.ToInt64(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_BigintUnsigned) == 1 {
		ex.BigintUnsigned = sdb.ToUInt64(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Varchar) == 1 {
		ex.Varchar = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_VarcharNull) == 1 {
		if row[*col] == nil {
			ex.VarcharNull = nil
		} else {
			ex.VarcharNull = new(string)
			*ex.VarcharNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Float) == 1 {
		ex.Float = sdb.ToFloat32(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_FloatNull) == 1 {
		if row[*col] == nil {
			ex.FloatNull = nil
		} else {
			ex.FloatNull = new(float32)
			*ex.FloatNull = sdb.ToFloat32(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Double) == 1 {
		ex.Double = sdb.ToFloat64(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_DoubleNull) == 1 {
		if row[*col] == nil {
			ex.DoubleNull = nil
		} else {
			ex.DoubleNull = new(float64)
			*ex.DoubleNull = sdb.ToFloat64(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Decimal) == 1 {
		ex.Decimal = sdb.ToFloat64(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_DecimalNull) == 1 {
		if row[*col] == nil {
			ex.DecimalNull = nil
		} else {
			ex.DecimalNull = new(float64)
			*ex.DecimalNull = sdb.ToFloat64(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Numeric) == 1 {
		ex.Numeric = sdb.ToFloat64(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_NumericNull) == 1 {
		if row[*col] == nil {
			ex.NumericNull = nil
		} else {
			ex.NumericNull = new(float64)
			*ex.NumericNull = sdb.ToFloat64(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_CreatedAt) == 1 {
		ex.CreatedAt = sdb.ToUInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_UpdatedAt) == 1 {
		ex.UpdatedAt = sdb.ToUInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Tinyint1) == 1 {
		ex.Tinyint1 = sdb.ToBool(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Tinyint1Null) == 1 {
		if row[*col] == nil {
			ex.Tinyint1Null = nil
		} else {
			ex.Tinyint1Null = new(bool)
			*ex.Tinyint1Null = sdb.ToBool(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Year) == 1 {
		ex.Year = sdb.ToInt(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_YearNull) == 1 {
		if row[*col] == nil {
			ex.YearNull = nil
		} else {
			ex.YearNull = new(int)
			*ex.YearNull = sdb.ToInt(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Date) == 1 {
		ex.Date = sdb.ToTime(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_DateNull) == 1 {
		if row[*col] == nil {
			ex.DateNull = nil
		} else {
			ex.DateNull = new(time.Time)
			*ex.DateNull = sdb.ToTime(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Time) == 1 {
		ex.Time = sdb.ToTime(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TimeNull) == 1 {
		if row[*col] == nil {
			ex.TimeNull = nil
		} else {
			ex.TimeNull = new(time.Time)
			*ex.TimeNull = sdb.ToTime(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Datetime) == 1 {
		ex.Datetime = sdb.ToTime(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_DatetimeNull) == 1 {
		if row[*col] == nil {
			ex.DatetimeNull = nil
		} else {
			ex.DatetimeNull = new(time.Time)
			*ex.DatetimeNull = sdb.ToTime(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Timestamp) == 1 {
		ex.Timestamp = sdb.ToTime(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TimestampNull) == 1 {
		if row[*col] == nil {
			ex.TimestampNull = nil
		} else {
			ex.TimestampNull = new(time.Time)
			*ex.TimestampNull = sdb.ToTime(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Char) == 1 {
		ex.Char = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_CharNull) == 1 {
		if row[*col] == nil {
			ex.CharNull = nil
		} else {
			ex.CharNull = new(string)
			*ex.CharNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Tinytext) == 1 {
		ex.Tinytext = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TinytextNull) == 1 {
		if row[*col] == nil {
			ex.TinytextNull = nil
		} else {
			ex.TinytextNull = new(string)
			*ex.TinytextNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Text) == 1 {
		ex.Text = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TextNull) == 1 {
		if row[*col] == nil {
			ex.TextNull = nil
		} else {
			ex.TextNull = new(string)
			*ex.TextNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Mediumtext) == 1 {
		ex.Mediumtext = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_MediumtextNull) == 1 {
		if row[*col] == nil {
			ex.MediumtextNull = nil
		} else {
			ex.MediumtextNull = new(string)
			*ex.MediumtextNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Longtext) == 1 {
		ex.Longtext = sdb.ToString(row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_LongtextNull) == 1 {
		if row[*col] == nil {
			ex.LongtextNull = nil
		} else {
			ex.LongtextNull = new(string)
			*ex.LongtextNull = sdb.ToString(row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Binary) == 1 {
		ex.Binary = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_BinaryNull) == 1 {
		if row[*col] == nil {
			ex.BinaryNull = nil
		} else {
			ex.BinaryNull = new([]byte)
			*ex.BinaryNull = (row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Varbinary) == 1 {
		ex.Varbinary = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_VarbinaryNull) == 1 {
		if row[*col] == nil {
			ex.VarbinaryNull = nil
		} else {
			ex.VarbinaryNull = new([]byte)
			*ex.VarbinaryNull = (row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Tinyblob) == 1 {
		ex.Tinyblob = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_TinyblobNull) == 1 {
		if row[*col] == nil {
			ex.TinyblobNull = nil
		} else {
			ex.TinyblobNull = new([]byte)
			*ex.TinyblobNull = (row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Blob) == 1 {
		ex.Blob = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_BlobNull) == 1 {
		if row[*col] == nil {
			ex.BlobNull = nil
		} else {
			ex.BlobNull = new([]byte)
			*ex.BlobNull = (row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Mediumblob) == 1 {
		ex.Mediumblob = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_MediumblobNull) == 1 {
		if row[*col] == nil {
			ex.MediumblobNull = nil
		} else {
			ex.MediumblobNull = new([]byte)
			*ex.MediumblobNull = (row[*col])
		}
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_Longblob) == 1 {
		ex.Longblob = (row[*col])
		*col++
	}
	if colSet == nil || colSet.Bit(codegen.Extensive_LongblobNull) == 1 {
		if row[*col] == nil {
			ex.LongblobNull = nil
		} else {
			ex.LongblobNull = new([]byte)
			*ex.LongblobNull = (row[*col])
		}
		*col++
	}
}

func (ex *ExtensiveStore) selectStatement() *sdb.SQLStatement {
	sql := sdb.NewSQLStatement()
	sql.Append("SELECT")
	sql.Fields("", "A", ExtensiveQueryFields(ex.colSet))
	sql.Append(" FROM fake_benchmark.extensive A ")
	if ex.where != "" {
		sql.Append("WHERE", ex.where)
	}
	if ex.groupBy != "" {
		sql.Append("GROUP BY", ex.groupBy)
	}
	if ex.orderBy != "" {
		sql.Append("ORDER BY", ex.orderBy)
	}
	if ex.limit > 0 {
		sql.AppendRaw("LIMIT ", ex.limit)
		if ex.offset > 0 {
			sql.AppendRaw(",", ex.offset)
		}
	}
	return sql
}

// QueryCustom retrieves many rows from 'fake_benchmark.extensive' as a slice of Extensive with 1:1 joined data.
func (ex *ExtensiveStore) QueryCustom(stmt string, args ...interface{}) ([]*codegen.Extensive, error) {
	dto := &Extensive{}
	data := &ExtensiveSlice{}
	err := ex.queryCustom(data, dto, stmt, args...)
	if err != nil {
		log.Error().Err(err).Msg("querycustom")
		return nil, err
	}
	retValues := make([]*codegen.Extensive, len(data.data))
	for i := range data.data {
		retValues[i] = &data.data[i].Extensive
	}
	return retValues, nil
}

// One retrieves a row from 'fake_benchmark.extensive' as a Extensive with 1:1 joined data.
func (ex *ExtensiveStore) One(args ...interface{}) (*codegen.Extensive, error) {
	data := &Extensive{}

	err := ex.one(data, ex.selectStatement(), args...)
	if err != nil {
		log.Error().Err(err).Msg("query one")
		return nil, err
	}
	return &data.Extensive, nil
}

// Query retrieves many rows from 'fake_benchmark.extensive' as a slice of Extensive with 1:1 joined data.
func (ex *ExtensiveStore) Query(args ...interface{}) ([]*codegen.Extensive, error) {
	stmt := ex.selectStatement()
	return ex.QueryCustom(stmt.Query(), args...)
}

// extensiveUpsertStmt helper for generating Upsert statement.
// nolint:gocyclo
func (ex *ExtensiveStore) extensiveUpsertStmt() *sdb.UpsertStatement {
	upsert := []string{}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint) == 1 {
		upsert = append(upsert, "tinyint = VALUES(tinyint)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintUnsigned) == 1 {
		upsert = append(upsert, "tinyint_unsigned = VALUES(tinyint_unsigned)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintNull) == 1 {
		upsert = append(upsert, "tinyint_null = VALUES(tinyint_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Smallint) == 1 {
		upsert = append(upsert, "smallint = VALUES(smallint)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintUnsigned) == 1 {
		upsert = append(upsert, "smallint_unsigned = VALUES(smallint_unsigned)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintNull) == 1 {
		upsert = append(upsert, "smallint_null = VALUES(smallint_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Int) == 1 {
		upsert = append(upsert, "int = VALUES(int)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntNull) == 1 {
		upsert = append(upsert, "int_null = VALUES(int_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntUnsigned) == 1 {
		upsert = append(upsert, "int_unsigned = VALUES(int_unsigned)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Bigint) == 1 {
		upsert = append(upsert, "bigint = VALUES(bigint)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintNull) == 1 {
		upsert = append(upsert, "bigint_null = VALUES(bigint_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintUnsigned) == 1 {
		upsert = append(upsert, "bigint_unsigned = VALUES(bigint_unsigned)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varchar) == 1 {
		upsert = append(upsert, "varchar = VALUES(varchar)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarcharNull) == 1 {
		upsert = append(upsert, "varchar_null = VALUES(varchar_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Float) == 1 {
		upsert = append(upsert, "float = VALUES(float)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_FloatNull) == 1 {
		upsert = append(upsert, "float_null = VALUES(float_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Double) == 1 {
		upsert = append(upsert, "double = VALUES(double)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DoubleNull) == 1 {
		upsert = append(upsert, "double_null = VALUES(double_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Decimal) == 1 {
		upsert = append(upsert, "decimal = VALUES(decimal)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DecimalNull) == 1 {
		upsert = append(upsert, "decimal_null = VALUES(decimal_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Numeric) == 1 {
		upsert = append(upsert, "numeric = VALUES(numeric)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_NumericNull) == 1 {
		upsert = append(upsert, "numeric_null = VALUES(numeric_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CreatedAt) == 1 {
		upsert = append(upsert, "created_at = VALUES(created_at)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_UpdatedAt) == 1 {
		upsert = append(upsert, "updated_at = VALUES(updated_at)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1) == 1 {
		upsert = append(upsert, "tinyint1 = VALUES(tinyint1)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1Null) == 1 {
		upsert = append(upsert, "tinyint1_null = VALUES(tinyint1_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Year) == 1 {
		upsert = append(upsert, "year = VALUES(year)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_YearNull) == 1 {
		upsert = append(upsert, "year_null = VALUES(year_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Date) == 1 {
		upsert = append(upsert, "date = VALUES(date)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DateNull) == 1 {
		upsert = append(upsert, "date_null = VALUES(date_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Time) == 1 {
		upsert = append(upsert, "time = VALUES(time)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimeNull) == 1 {
		upsert = append(upsert, "time_null = VALUES(time_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Datetime) == 1 {
		upsert = append(upsert, "datetime = VALUES(datetime)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DatetimeNull) == 1 {
		upsert = append(upsert, "datetime_null = VALUES(datetime_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Timestamp) == 1 {
		upsert = append(upsert, "timestamp = VALUES(timestamp)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimestampNull) == 1 {
		upsert = append(upsert, "timestamp_null = VALUES(timestamp_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Char) == 1 {
		upsert = append(upsert, "char = VALUES(char)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CharNull) == 1 {
		upsert = append(upsert, "char_null = VALUES(char_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinytext) == 1 {
		upsert = append(upsert, "tinytext = VALUES(tinytext)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinytextNull) == 1 {
		upsert = append(upsert, "tinytext_null = VALUES(tinytext_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Text) == 1 {
		upsert = append(upsert, "text = VALUES(text)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TextNull) == 1 {
		upsert = append(upsert, "text_null = VALUES(text_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumtext) == 1 {
		upsert = append(upsert, "mediumtext = VALUES(mediumtext)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumtextNull) == 1 {
		upsert = append(upsert, "mediumtext_null = VALUES(mediumtext_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longtext) == 1 {
		upsert = append(upsert, "longtext = VALUES(longtext)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongtextNull) == 1 {
		upsert = append(upsert, "longtext_null = VALUES(longtext_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Binary) == 1 {
		upsert = append(upsert, "binary = VALUES(binary)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BinaryNull) == 1 {
		upsert = append(upsert, "binary_null = VALUES(binary_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varbinary) == 1 {
		upsert = append(upsert, "varbinary = VALUES(varbinary)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarbinaryNull) == 1 {
		upsert = append(upsert, "varbinary_null = VALUES(varbinary_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyblob) == 1 {
		upsert = append(upsert, "tinyblob = VALUES(tinyblob)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyblobNull) == 1 {
		upsert = append(upsert, "tinyblob_null = VALUES(tinyblob_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Blob) == 1 {
		upsert = append(upsert, "blob = VALUES(blob)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BlobNull) == 1 {
		upsert = append(upsert, "blob_null = VALUES(blob_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumblob) == 1 {
		upsert = append(upsert, "mediumblob = VALUES(mediumblob)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumblobNull) == 1 {
		upsert = append(upsert, "mediumblob_null = VALUES(mediumblob_null)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longblob) == 1 {
		upsert = append(upsert, "longblob = VALUES(longblob)")
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongblobNull) == 1 {
		upsert = append(upsert, "longblob_null = VALUES(longblob_null)")
	}
	sql := &sdb.UpsertStatement{}
	sql.InsertInto("fake_benchmark.extensive")
	sql.Columns("id", "tinyint", "tinyint_unsigned", "tinyint_null", "smallint", "smallint_unsigned", "smallint_null", "int", "int_null", "int_unsigned", "bigint", "bigint_null", "bigint_unsigned", "varchar", "varchar_null", "float", "float_null", "double", "double_null", "decimal", "decimal_null", "numeric", "numeric_null", "created_at", "updated_at", "tinyint1", "tinyint1_null", "year", "year_null", "date", "date_null", "time", "time_null", "datetime", "datetime_null", "timestamp", "timestamp_null", "char", "char_null", "tinytext", "tinytext_null", "text", "text_null", "mediumtext", "mediumtext_null", "longtext", "longtext_null", "binary", "binary_null", "varbinary", "varbinary_null", "tinyblob", "tinyblob_null", "blob", "blob_null", "mediumblob", "mediumblob_null", "longblob", "longblob_null")
	sql.OnDuplicateKeyUpdate(upsert)
	return sql
}

// Upsert executes upsert for array of Extensive
func (ex *ExtensiveStore) Upsert(data ...*codegen.Extensive) (int64, error) {
	sql := ex.extensiveUpsertStmt()

	for _, d := range data {
		sql.Record(d)
	}

	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "ExtensiveUpsert").Str("stmt", sql.String()).Msg("sql")
	}
	res, err := ex.db.Exec(sql.Query())
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return -1, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		log.Error().Err(err).Msg("rowsaffected")
		return -1, err
	}

	return affected, nil
}

// Insert inserts the Extensive to the database.
func (ex *ExtensiveStore) Insert(data *codegen.Extensive) error {
	var err error
	sql := sdb.NewSQLStatement()
	data.CreatedAt = stime.Now()
	data.UpdatedAt = stime.Now()
	sql.AppendRaw("INSERT INTO fake_benchmark.extensive (")
	fields := ExtensiveQueryFields(ex.colSet)
	sql.Fields("", "", fields)
	sql.Append(") VALUES (")
	for i := range fields {
		if i > 0 {
			sql.Append(",")
		}
		sql.Append("?")
	}
	sql.Append(")")

	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.Insert").Str("stmt", sql.String()).Int("ID", data.ID).Int("Tinyint", data.Tinyint).Uint("TinyintUnsigned", data.TinyintUnsigned).Int("TinyintNull", logInt(data.TinyintNull)).Int("Smallint", data.Smallint).Uint("SmallintUnsigned", data.SmallintUnsigned).Int("SmallintNull", logInt(data.SmallintNull)).Int("Int", data.Int).Int("IntNull", logInt(data.IntNull)).Uint("IntUnsigned", data.IntUnsigned).Int64("Bigint", data.Bigint).Int64("BigintNull", logInt64(data.BigintNull)).Uint64("BigintUnsigned", data.BigintUnsigned).Str("Varchar", data.Varchar).Str("VarcharNull", logString(data.VarcharNull)).Float32("Float", data.Float).Float32("FloatNull", logFloat32(data.FloatNull)).Float64("Double", data.Double).Float64("DoubleNull", logFloat64(data.DoubleNull)).Float64("Decimal", data.Decimal).Float64("DecimalNull", logFloat64(data.DecimalNull)).Float64("Numeric", data.Numeric).Float64("NumericNull", logFloat64(data.NumericNull)).Uint("CreatedAt", data.CreatedAt).Uint("UpdatedAt", data.UpdatedAt).Bool("Tinyint1", data.Tinyint1).Bool("Tinyint1Null", logBool(data.Tinyint1Null)).Int("Year", data.Year).Int("YearNull", logInt(data.YearNull)).Time("Date", data.Date).Time("DateNull", logTime(data.DateNull)).Time("Time", data.Time).Time("TimeNull", logTime(data.TimeNull)).Time("Datetime", data.Datetime).Time("DatetimeNull", logTime(data.DatetimeNull)).Time("Timestamp", data.Timestamp).Time("TimestampNull", logTime(data.TimestampNull)).Str("Char", data.Char).Str("CharNull", logString(data.CharNull)).Str("Tinytext", data.Tinytext).Str("TinytextNull", logString(data.TinytextNull)).Str("Text", data.Text).Str("TextNull", logString(data.TextNull)).Str("Mediumtext", data.Mediumtext).Str("MediumtextNull", logString(data.MediumtextNull)).Str("Longtext", data.Longtext).Str("LongtextNull", logString(data.LongtextNull)).Bytes("Binary", data.Binary).Bytes("BinaryNull", logBytes(data.BinaryNull)).Bytes("Varbinary", data.Varbinary).Bytes("VarbinaryNull", logBytes(data.VarbinaryNull)).Bytes("Tinyblob", data.Tinyblob).Bytes("TinyblobNull", logBytes(data.TinyblobNull)).Bytes("Blob", data.Blob).Bytes("BlobNull", logBytes(data.BlobNull)).Bytes("Mediumblob", data.Mediumblob).Bytes("MediumblobNull", logBytes(data.MediumblobNull)).Bytes("Longblob", data.Longblob).Bytes("LongblobNull", logBytes(data.LongblobNull)).Msg("sql")
	}
	res, err := ex.db.Exec(sql.Query(), data.ID, data.Tinyint, data.TinyintUnsigned, data.TinyintNull, data.Smallint, data.SmallintUnsigned, data.SmallintNull, data.Int, data.IntNull, data.IntUnsigned, data.Bigint, data.BigintNull, data.BigintUnsigned, data.Varchar, data.VarcharNull, data.Float, data.FloatNull, data.Double, data.DoubleNull, data.Decimal, data.DecimalNull, data.Numeric, data.NumericNull, data.CreatedAt, data.UpdatedAt, data.Tinyint1, data.Tinyint1Null, data.Year, data.YearNull, data.Date, data.DateNull, data.Time, data.TimeNull, data.Datetime, data.DatetimeNull, data.Timestamp, data.TimestampNull, data.Char, data.CharNull, data.Tinytext, data.TinytextNull, data.Text, data.TextNull, data.Mediumtext, data.MediumtextNull, data.Longtext, data.LongtextNull, data.Binary, data.BinaryNull, data.Varbinary, data.VarbinaryNull, data.Tinyblob, data.TinyblobNull, data.Blob, data.BlobNull, data.Mediumblob, data.MediumblobNull, data.Longblob, data.LongblobNull)
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		log.Error().Err(err).Msg("lastinsertid")
		return err
	}

	// set primary key and existence
	data.ID = int(id)

	return nil
}

// Update updates the Extensive in the database.
// nolint[gocyclo]
func (ex *ExtensiveStore) Update(data *codegen.Extensive) (int64, error) {
	sql := sdb.NewSQLStatement()
	var prepend string
	args := []interface{}{}
	data.UpdatedAt = stime.Now()
	sql.Append("UPDATE fake_benchmark.extensive SET")
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint) == 1 {
		sql.AppendRaw(prepend, "tinyint = ?")
		prepend = ","
		args = append(args, data.Tinyint)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintUnsigned) == 1 {
		sql.AppendRaw(prepend, "tinyint_unsigned = ?")
		prepend = ","
		args = append(args, data.TinyintUnsigned)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintNull) == 1 {
		sql.AppendRaw(prepend, "tinyint_null = ?")
		prepend = ","
		args = append(args, data.TinyintNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Smallint) == 1 {
		sql.AppendRaw(prepend, "smallint = ?")
		prepend = ","
		args = append(args, data.Smallint)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintUnsigned) == 1 {
		sql.AppendRaw(prepend, "smallint_unsigned = ?")
		prepend = ","
		args = append(args, data.SmallintUnsigned)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintNull) == 1 {
		sql.AppendRaw(prepend, "smallint_null = ?")
		prepend = ","
		args = append(args, data.SmallintNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Int) == 1 {
		sql.AppendRaw(prepend, "int = ?")
		prepend = ","
		args = append(args, data.Int)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntNull) == 1 {
		sql.AppendRaw(prepend, "int_null = ?")
		prepend = ","
		args = append(args, data.IntNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntUnsigned) == 1 {
		sql.AppendRaw(prepend, "int_unsigned = ?")
		prepend = ","
		args = append(args, data.IntUnsigned)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Bigint) == 1 {
		sql.AppendRaw(prepend, "bigint = ?")
		prepend = ","
		args = append(args, data.Bigint)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintNull) == 1 {
		sql.AppendRaw(prepend, "bigint_null = ?")
		prepend = ","
		args = append(args, data.BigintNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintUnsigned) == 1 {
		sql.AppendRaw(prepend, "bigint_unsigned = ?")
		prepend = ","
		args = append(args, data.BigintUnsigned)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varchar) == 1 {
		sql.AppendRaw(prepend, "varchar = ?")
		prepend = ","
		args = append(args, data.Varchar)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarcharNull) == 1 {
		sql.AppendRaw(prepend, "varchar_null = ?")
		prepend = ","
		args = append(args, data.VarcharNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Float) == 1 {
		sql.AppendRaw(prepend, "float = ?")
		prepend = ","
		args = append(args, data.Float)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_FloatNull) == 1 {
		sql.AppendRaw(prepend, "float_null = ?")
		prepend = ","
		args = append(args, data.FloatNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Double) == 1 {
		sql.AppendRaw(prepend, "double = ?")
		prepend = ","
		args = append(args, data.Double)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DoubleNull) == 1 {
		sql.AppendRaw(prepend, "double_null = ?")
		prepend = ","
		args = append(args, data.DoubleNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Decimal) == 1 {
		sql.AppendRaw(prepend, "decimal = ?")
		prepend = ","
		args = append(args, data.Decimal)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DecimalNull) == 1 {
		sql.AppendRaw(prepend, "decimal_null = ?")
		prepend = ","
		args = append(args, data.DecimalNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Numeric) == 1 {
		sql.AppendRaw(prepend, "numeric = ?")
		prepend = ","
		args = append(args, data.Numeric)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_NumericNull) == 1 {
		sql.AppendRaw(prepend, "numeric_null = ?")
		prepend = ","
		args = append(args, data.NumericNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CreatedAt) == 1 {
		sql.AppendRaw(prepend, "created_at = ?")
		prepend = ","
		args = append(args, data.CreatedAt)
	}
	sql.AppendRaw(prepend, "updated_at = ?")
	prepend = ","
	args = append(args, data.UpdatedAt)
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1) == 1 {
		sql.AppendRaw(prepend, "tinyint1 = ?")
		prepend = ","
		args = append(args, data.Tinyint1)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1Null) == 1 {
		sql.AppendRaw(prepend, "tinyint1_null = ?")
		prepend = ","
		args = append(args, data.Tinyint1Null)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Year) == 1 {
		sql.AppendRaw(prepend, "year = ?")
		prepend = ","
		args = append(args, data.Year)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_YearNull) == 1 {
		sql.AppendRaw(prepend, "year_null = ?")
		prepend = ","
		args = append(args, data.YearNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Date) == 1 {
		sql.AppendRaw(prepend, "date = ?")
		prepend = ","
		args = append(args, data.Date)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DateNull) == 1 {
		sql.AppendRaw(prepend, "date_null = ?")
		prepend = ","
		args = append(args, data.DateNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Time) == 1 {
		sql.AppendRaw(prepend, "time = ?")
		prepend = ","
		args = append(args, data.Time)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimeNull) == 1 {
		sql.AppendRaw(prepend, "time_null = ?")
		prepend = ","
		args = append(args, data.TimeNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Datetime) == 1 {
		sql.AppendRaw(prepend, "datetime = ?")
		prepend = ","
		args = append(args, data.Datetime)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DatetimeNull) == 1 {
		sql.AppendRaw(prepend, "datetime_null = ?")
		prepend = ","
		args = append(args, data.DatetimeNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Timestamp) == 1 {
		sql.AppendRaw(prepend, "timestamp = ?")
		prepend = ","
		args = append(args, data.Timestamp)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimestampNull) == 1 {
		sql.AppendRaw(prepend, "timestamp_null = ?")
		prepend = ","
		args = append(args, data.TimestampNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Char) == 1 {
		sql.AppendRaw(prepend, "char = ?")
		prepend = ","
		args = append(args, data.Char)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CharNull) == 1 {
		sql.AppendRaw(prepend, "char_null = ?")
		prepend = ","
		args = append(args, data.CharNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinytext) == 1 {
		sql.AppendRaw(prepend, "tinytext = ?")
		prepend = ","
		args = append(args, data.Tinytext)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinytextNull) == 1 {
		sql.AppendRaw(prepend, "tinytext_null = ?")
		prepend = ","
		args = append(args, data.TinytextNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Text) == 1 {
		sql.AppendRaw(prepend, "text = ?")
		prepend = ","
		args = append(args, data.Text)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TextNull) == 1 {
		sql.AppendRaw(prepend, "text_null = ?")
		prepend = ","
		args = append(args, data.TextNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumtext) == 1 {
		sql.AppendRaw(prepend, "mediumtext = ?")
		prepend = ","
		args = append(args, data.Mediumtext)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumtextNull) == 1 {
		sql.AppendRaw(prepend, "mediumtext_null = ?")
		prepend = ","
		args = append(args, data.MediumtextNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longtext) == 1 {
		sql.AppendRaw(prepend, "longtext = ?")
		prepend = ","
		args = append(args, data.Longtext)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongtextNull) == 1 {
		sql.AppendRaw(prepend, "longtext_null = ?")
		prepend = ","
		args = append(args, data.LongtextNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Binary) == 1 {
		sql.AppendRaw(prepend, "binary = ?")
		prepend = ","
		args = append(args, data.Binary)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BinaryNull) == 1 {
		sql.AppendRaw(prepend, "binary_null = ?")
		prepend = ","
		args = append(args, data.BinaryNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varbinary) == 1 {
		sql.AppendRaw(prepend, "varbinary = ?")
		prepend = ","
		args = append(args, data.Varbinary)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarbinaryNull) == 1 {
		sql.AppendRaw(prepend, "varbinary_null = ?")
		prepend = ","
		args = append(args, data.VarbinaryNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyblob) == 1 {
		sql.AppendRaw(prepend, "tinyblob = ?")
		prepend = ","
		args = append(args, data.Tinyblob)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyblobNull) == 1 {
		sql.AppendRaw(prepend, "tinyblob_null = ?")
		prepend = ","
		args = append(args, data.TinyblobNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Blob) == 1 {
		sql.AppendRaw(prepend, "blob = ?")
		prepend = ","
		args = append(args, data.Blob)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BlobNull) == 1 {
		sql.AppendRaw(prepend, "blob_null = ?")
		prepend = ","
		args = append(args, data.BlobNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumblob) == 1 {
		sql.AppendRaw(prepend, "mediumblob = ?")
		prepend = ","
		args = append(args, data.Mediumblob)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumblobNull) == 1 {
		sql.AppendRaw(prepend, "mediumblob_null = ?")
		prepend = ","
		args = append(args, data.MediumblobNull)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longblob) == 1 {
		sql.AppendRaw(prepend, "longblob = ?")
		prepend = ","
		args = append(args, data.Longblob)
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongblobNull) == 1 {
		sql.AppendRaw(prepend, "longblob_null = ?")
		args = append(args, data.LongblobNull)
	}
	sql.Append(" WHERE id = ?")
	args = append(args, data.ID)
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.Update").Str("stmt", sql.String()).Interface("args", args).Msg("sql")
	}
	res, err := ex.db.Exec(sql.Query(), args...)
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return 0, err
	}
	return res.RowsAffected()
}

// Delete deletes the Extensive from the database.
func (ex *ExtensiveStore) Delete(data *codegen.Extensive) (int64, error) {
	var err error

	sql := sdb.NewSQLStatement()
	sql.Append("DELETE FROM fake_benchmark.extensive WHERE")
	sql.Append("id = ?")

	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.Delete").Str("stmt", sql.String()).Int("ID", data.ID).Msg("sql")
	}
	res, err := ex.db.Exec(sql.Query(), data.ID)
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return 0, err
	}
	return res.RowsAffected()
}

// DeleteSlice delets all slice element from the database.
func (ex *ExtensiveStore) DeleteSlice(data []*codegen.Extensive) (int64, error) {
	var err error

	sql := sdb.NewSQLStatement()
	sql.Append("DELETE FROM fake_benchmark.extensive WHERE")
	sql.AppendRaw("id IN (")
	for i := range data {
		if i > 0 {
			sql.AppendRaw(",")
		}
		sql.AppendInt(data[i].ID)
	}
	sql.Append(")")
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.DeleteSlice").Str("stmt", sql.String()).Msg("sql")
	}
	res, err := ex.db.Exec(sql.Query())
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return 0, err
	}
	return res.RowsAffected()
}

// DeleteByQuery uses a where condition to delete entries.
func (ex *ExtensiveStore) DeleteByQuery(args ...interface{}) (int64, error) {
	var err error
	sql := sdb.NewSQLStatement()
	sql.Append("DELETE FROM fake_benchmark.extensive")
	if ex.where == "" {
		return 0, errors.New("no where condition set")
	}
	sql.Append("WHERE", ex.where)
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.DeleteByQuery").Str("stmt", sql.String()).Interface("args", args).Msg("sql")
	}

	res, err := ex.db.Exec(sql.Query())
	if err != nil {
		log.Error().Err(err).Msg("exec")
		return 0, err
	}
	return res.RowsAffected()
}

// Truncate deletes all rows from Extensive.
func (ex *ExtensiveStore) Truncate() error {
	sql := sdb.NewSQLStatement()
	sql.Append("TRUNCATE fake_benchmark.extensive")
	if zerolog.GlobalLevel() == zerolog.DebugLevel {
		log.Debug().Str("fn", "fake_benchmark.extensive.Truncate").Str("stmt", sql.String()).Msg("sql")
	}
	_, err := ex.db.Exec(sql.Query())
	if err != nil {
		log.Error().Err(err).Msg("exec")
	}
	return err
}

// OneByID retrieves a row from 'fake_benchmark.extensive' as a Extensive.
//
// Generated from index 'primary'.
// nolint[goconst]
func (ex *ExtensiveStore) OneByID(id int) (*codegen.Extensive, error) {
	ex.where = "A.id = ?"
	return ex.One(id)
}

// ToJSON writes a single object to the buffer.
// nolint[gocylco]
func (ex *ExtensiveStore) ToJSON(t *sdb.JsonBuffer, data *Extensive) {
	prepend := "{"
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_ID) == 1 {
		t.JD(prepend, "id", data.ID)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint) == 1 {
		t.JD(prepend, "tinyint", data.Tinyint)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintUnsigned) == 1 {
		t.JDu(prepend, "tinyint_unsigned", data.TinyintUnsigned)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyintNull) == 1 {
		t.JD(prepend, "tinyint_null", *data.TinyintNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Smallint) == 1 {
		t.JD(prepend, "smallint", data.Smallint)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintUnsigned) == 1 {
		t.JDu(prepend, "smallint_unsigned", data.SmallintUnsigned)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_SmallintNull) == 1 {
		t.JD(prepend, "smallint_null", *data.SmallintNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Int) == 1 {
		t.JD(prepend, "int", data.Int)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntNull) == 1 {
		t.JD(prepend, "int_null", *data.IntNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_IntUnsigned) == 1 {
		t.JDu(prepend, "int_unsigned", data.IntUnsigned)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Bigint) == 1 {
		t.JD64(prepend, "bigint", data.Bigint)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintNull) == 1 {
		t.JD64(prepend, "bigint_null", *data.BigintNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BigintUnsigned) == 1 {
		t.JD64u(prepend, "bigint_unsigned", data.BigintUnsigned)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varchar) == 1 {
		t.JS(prepend, "varchar", data.Varchar)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarcharNull) == 1 {
		t.JS(prepend, "varchar_null", *data.VarcharNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Float) == 1 {
		t.JF(prepend, "float", data.Float)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_FloatNull) == 1 {
		t.JF(prepend, "float_null", *data.FloatNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Double) == 1 {
		t.JF64(prepend, "double", data.Double)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DoubleNull) == 1 {
		t.JF64(prepend, "double_null", *data.DoubleNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Decimal) == 1 {
		t.JF64(prepend, "decimal", data.Decimal)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DecimalNull) == 1 {
		t.JF64(prepend, "decimal_null", *data.DecimalNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Numeric) == 1 {
		t.JF64(prepend, "numeric", data.Numeric)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_NumericNull) == 1 {
		t.JF64(prepend, "numeric_null", *data.NumericNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CreatedAt) == 1 {
		t.JDu(prepend, "created_at", data.CreatedAt)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_UpdatedAt) == 1 {
		t.JDu(prepend, "updated_at", data.UpdatedAt)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1) == 1 {
		t.JB(prepend, "tinyint1", data.Tinyint1)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyint1Null) == 1 {
		t.JB(prepend, "tinyint1_null", *data.Tinyint1Null)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Year) == 1 {
		t.JD(prepend, "year", data.Year)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_YearNull) == 1 {
		t.JD(prepend, "year_null", *data.YearNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Date) == 1 {
		t.JT(prepend, "date", data.Date)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DateNull) == 1 {
		t.JT(prepend, "date_null", *data.DateNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Time) == 1 {
		t.JT(prepend, "time", data.Time)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimeNull) == 1 {
		t.JT(prepend, "time_null", *data.TimeNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Datetime) == 1 {
		t.JT(prepend, "datetime", data.Datetime)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_DatetimeNull) == 1 {
		t.JT(prepend, "datetime_null", *data.DatetimeNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Timestamp) == 1 {
		t.JT(prepend, "timestamp", data.Timestamp)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TimestampNull) == 1 {
		t.JT(prepend, "timestamp_null", *data.TimestampNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Char) == 1 {
		t.JS(prepend, "char", data.Char)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_CharNull) == 1 {
		t.JS(prepend, "char_null", *data.CharNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinytext) == 1 {
		t.JS(prepend, "tinytext", data.Tinytext)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinytextNull) == 1 {
		t.JS(prepend, "tinytext_null", *data.TinytextNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Text) == 1 {
		t.JS(prepend, "text", data.Text)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TextNull) == 1 {
		t.JS(prepend, "text_null", *data.TextNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumtext) == 1 {
		t.JS(prepend, "mediumtext", data.Mediumtext)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumtextNull) == 1 {
		t.JS(prepend, "mediumtext_null", *data.MediumtextNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longtext) == 1 {
		t.JS(prepend, "longtext", data.Longtext)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongtextNull) == 1 {
		t.JS(prepend, "longtext_null", *data.LongtextNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Binary) == 1 {
		t.JByte(prepend, "binary", data.Binary)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BinaryNull) == 1 {
		t.JByte(prepend, "binary_null", *data.BinaryNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Varbinary) == 1 {
		t.JByte(prepend, "varbinary", data.Varbinary)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_VarbinaryNull) == 1 {
		t.JByte(prepend, "varbinary_null", *data.VarbinaryNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Tinyblob) == 1 {
		t.JByte(prepend, "tinyblob", data.Tinyblob)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_TinyblobNull) == 1 {
		t.JByte(prepend, "tinyblob_null", *data.TinyblobNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Blob) == 1 {
		t.JByte(prepend, "blob", data.Blob)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_BlobNull) == 1 {
		t.JByte(prepend, "blob_null", *data.BlobNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Mediumblob) == 1 {
		t.JByte(prepend, "mediumblob", data.Mediumblob)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_MediumblobNull) == 1 {
		t.JByte(prepend, "mediumblob_null", *data.MediumblobNull)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_Longblob) == 1 {
		t.JByte(prepend, "longblob", data.Longblob)
		prepend = ","
	}
	if ex.colSet == nil || ex.colSet.Bit(codegen.Extensive_LongblobNull) == 1 {
		t.JByte(prepend, "longblob_null", *data.LongblobNull)
	}
	t.S(`}`)
}

// ToJSONArray writes a slice to the named array.
func (ex *ExtensiveStore) ToJSONArray(w io.Writer, data []*Extensive, name string) {
	t := sdb.NewJsonBuffer()
	t.SS(`{"`, name, `":[`)
	for i := range data {
		if i > 0 {
			t.S(",")
		}
		ex.ToJSON(t, data[i])
	}

	t.S("]}")
	_, err := w.Write(t.Bytes())
	if err != nil {
		panic(err)
	}
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
