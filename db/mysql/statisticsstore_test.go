package mysql

import (
	"testing"

	codegen "bitbucket.org/codegen"
	"github.com/DATA-DOG/go-sqlmock"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

// Insert inserts the Statistics to the database.
func TestStatisticsInsert(t *testing.T) {
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("INSERT INTO information_schema.STATISTICS (table_catalog, table_schema, table_name, non_unique, index_schema, index_name, seq_in_index, column_name, collation, cardinality, sub_part, packed, nullable, index_type, comment, index_comment, is_visible, expression) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )").
		WithArgs("", "", "", 0, "", nil, 0, nil, nil, nil, nil, nil, "", "", "", "", "", nil).
		WillReturnResult(sqlmock.NewResult(1, 1))
	store := NewStatisticsStore(db)
	err = store.Insert(&codegen.Statistics{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}

func TestStatisticsUpdate(t *testing.T) {
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("UPDATE information_schema.STATISTICS SET table_catalog = ?,table_schema = ?,table_name = ?,non_unique = ?,index_schema = ?,index_name = ?,seq_in_index = ?,column_name = ?,collation = ?,cardinality = ?,sub_part = ?,packed = ?,nullable = ?,index_type = ?,comment = ?,index_comment = ?,is_visible = ?,expression = ? WHERE ").
		WithArgs("", "", "", 0, "", nil, 0, nil, nil, nil, nil, nil, "", "", "", "", "", nil).
		WillReturnResult(sqlmock.NewResult(0, 1))
	store := NewStatisticsStore(db)
	aff, err := store.Update(&codegen.Statistics{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

func TestStatisticsSelectWithoutJoin(t *testing.T) {
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	rows := sqlmock.NewRows([]string{"A.table_catalog", "A.table_schema", "A.table_name", "A.non_unique", "A.index_schema", "A.index_name", "A.seq_in_index", "A.column_name", "A.collation", "A.cardinality", "A.sub_part", "A.packed", "A.nullable", "A.index_type", "A.comment", "A.index_comment", "A.is_visible", "A.expression"}).
		AddRow("", "", "", 0, "", nil, 0, nil, nil, nil, nil, nil, "", "", "", "", "", nil).
		AddRow("", "", "", 0, "", nil, 0, nil, nil, nil, nil, nil, "", "", "", "", "", nil)

	mock.ExpectQuery("SELECT A.table_catalog, A.table_schema, A.table_name, A.non_unique, A.index_schema, A.index_name, A.seq_in_index, A.column_name, A.collation, A.cardinality, A.sub_part, A.packed, A.nullable, A.index_type, A.comment, A.index_comment, A.is_visible, A.expression FROM information_schema.STATISTICS A").
		WillReturnRows(rows)
	store := NewStatisticsStore(db).WithoutJoins()
	data, err := store.Query()
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}

	if len(data) != 2 {
		t.Errorf("number of rows != 2: %d", len(data))
	}
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
