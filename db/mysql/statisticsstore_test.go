package mysql

import (
	"testing"

	codegen "bitbucket.org/codegen"
	"github.com/DATA-DOG/go-sqlmock"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

// Insert inserts the Statistics to the database.
func TestStatisticsInsert(t *testing.T) {
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("INSERT INTO information_schema.STATISTICS ( table_catalog, table_schema, table_name, non_unique, index_schema, index_name, seq_in_index, column_name, collation, cardinality, sub_part, packed, nullable, index_type, comment, index_comment ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )").
		WithArgs("", "", "", 0, "", "", 0, "", nil, nil, nil, nil, "", "", nil, "").
		WillReturnResult(sqlmock.NewResult(1, 1))

	store := NewStatisticsStore(db)
	err = store.Insert(&codegen.Statistics{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}

// Updates Statistics.
func TestStatisticsUpdate(t *testing.T) {
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("UPDATE information_schema.STATISTICS SET table_catalog = ?,table_schema = ?,table_name = ?,non_unique = ?,index_schema = ?,index_name = ?,seq_in_index = ?,column_name = ?,collation = ?,cardinality = ?,sub_part = ?,packed = ?,nullable = ?,index_type = ?,comment = ?,index_comment = ? WHERE").
		WithArgs("", "", "", 0, "", "", 0, "", nil, nil, nil, nil, "", "", nil, "").
		WillReturnResult(sqlmock.NewResult(1, 1))

	store := NewStatisticsStore(db)
	aff, err := store.Update(&codegen.Statistics{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
