package mysql

import (
	"database/sql"
	"database/sql/driver"
	"testing"

	"github.com/brianvoe/gofakeit/v5"
	"github.com/rs/zerolog"
)

// GENERATED BY CODEGEN. DO NOT EDIT.

func init() {
	zerolog.SetGlobalLevel(zerolog.ErrorLevel)
	gofakeit.Seed(1)
}

func insertQuery() (*sql.DB, error) {
	newResultDSN("bench", QueryResult{
		ResultRows: &ResultRows{
			NumRows: 1,
		},
		NumInput: -1,
	})
	return sql.Open("mimic", "bench")
}

func selectQuery() (*sql.DB, error) {
	newResultDSN("bench", QueryResult{
		Query: &Query{
			Cols: columnsQueryFieldsAll,
			Vals: [][]driver.Value{},
		},
	})
	return sql.Open("mimic", "bench")
}

// TODO: Query 100 rows

// TODO: eager vs. store

func BenchmarkOne(b *testing.B) {
	// BenchmarkSimpleStore/newStore-8         	    3000	    358940 ns/op	   36732 B/op	     889 allocs/op
	// BenchmarkSimpleStore/newGeneral-8       	    5000	    366262 ns/op	   38502 B/op	     922 allocs/op
	// BenchmarkSimpleStore/codegen-8          	    5000	    361013 ns/op	   36405 B/op	     877 allocs/op
	// b.Run("newStore", func(b *testing.B) {
	// 	store := NewBestellungStore(DB).Where("A.id <= ?")
	// 	for i := 0; i < b.N; i++ {
	// 		bestellung, err := store.Query(10)
	// 		if err != nil {
	// 			b.Fatal(err)
	// 		}
	// 		if len(bestellung) != 10 {
	// 			b.Fail()
	// 		}
	// 	}
	// })

	// b.Run("newGeneral", func(b *testing.B) {
	// 	mytest := Row{
	// 		&Bestellung{},
	// 		&Kunde{},
	// 		&Lieferadresse{},
	// 	}

	// 	for i := 0; i < b.N; i++ {
	// 		retValue := &Result{}

	// 		store := NewStore(DB).
	// 			Select("").
	// 			Fields("A", BestellungQueryFields).
	// 			Fields("B", KundeQueryFields).
	// 			Fields("C", LieferadresseQueryFields).
	// 			From("bestellung A").
	// 			LeftJoin("kunde B", "A.kundennr = B.kundennr").
	// 			LeftJoin("lieferadresse C", "A.lieferadressnr = C.lieferadressnr").
	// 			Where("A.id <= ?").
	// 			BindSlice(retValue, mytest)

	// 		err := store.Query(10)
	// 		if err != nil {
	// 			b.Fatal(err)
	// 		}
	// 		if len(*retValue) != 10 {
	// 			b.Fail()
	// 		}
	// 	}
	// })

	// b.Run("codegen", func(b *testing.B) {
	// 	store := models.NewBestellungStore(models.DB).Where("A.id <= ?")
	// 	for i := 0; i < b.N; i++ {
	// 		bestellung, err := store.Query(10)
	// 		if err != nil {
	// 			b.Fatal(err)
	// 		}
	// 		if len(bestellung) != 10 {
	// 			b.Fail()
	// 		}
	// 	}
	// })
}

// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^
