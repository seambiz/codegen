package mysql

import (
	"database/sql/driver"
	"testing"

	"github.com/brianvoe/gofakeit/v5"
	"github.com/rs/zerolog"
	codegen "github.com/seambiz/codegen"
)

// GENERATED BY CODEGEN.

func BenchmarkSTATISTICSInsert(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.STATISTICS{}
	store := NewSTATISTICSStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			err := store.Insert(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkSTATISTICSUpdate(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.STATISTICS{}
	store := NewSTATISTICSStore(ctx, db)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Update(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkSTATISTICSSelectAll(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}

	db, err := selectQuery(statisticsQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.STATISTICS{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, data.TABLESCHEMA, data.TABLENAME, data.NONUNIQUE, data.INDEXSCHEMA, *data.INDEXNAME, data.SEQININDEX, *data.COLUMNNAME, *data.COLLATION, *data.CARDINALITY, *data.SUBPART, *data.PACKED, data.NULLABLE, data.INDEXTYPE, data.COMMENT, data.INDEXCOMMENT, data.ISVISIBLE, *data.EXPRESSION})
	}
	store := NewSTATISTICSStore(ctx, db)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkSTATISTICSSelectCols(b *testing.B) {
	b.ReportAllocs()
	ctx := &codegen.Context{Log:&zerolog.Logger{}}


	db, err := selectQuery(statisticsQueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &codegen.STATISTICS{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {addResultRowDSN("bench", []driver.Value{data.TABLECATALOG, *data.EXPRESSION})
	}
	store := NewSTATISTICSStore(ctx, db).Columns(codegen.STATISTICS_TABLECATALOG, codegen.STATISTICS_EXPRESSION)

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}



// ^^ END OF GENERATED BY CODEGEN. ^^
