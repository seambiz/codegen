package mysql

import (
	"testing"

	codegen "bitbucket.org/codegen"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/rs/zerolog"
)

// GENERATED BY CODEGEN.

// Insert inserts the Person to the database.
func TestPersonInsert(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("INSERT INTO fake_benchmark.person (id, name) VALUES ( ? , ? )").
		WithArgs(0, "").
		WillReturnResult(sqlmock.NewResult(1, 1))
	store := NewPersonStore(ctx, db)
	err = store.Insert(&codegen.Person{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}

func TestPersonUpdate(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("UPDATE fake_benchmark.person SET name = ? WHERE id = ?").
		WithArgs("", 0).
		WillReturnResult(sqlmock.NewResult(0, 1))
	store := NewPersonStore(ctx, db)
	aff, err := store.Update(&codegen.Person{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

func TestPersonSelectWithoutJoin(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	rows := sqlmock.NewRows([]string{"A.id", "A.name"}).
		AddRow(0, "").
		AddRow(0, "")

	mock.ExpectQuery("SELECT A.id, A.name FROM fake_benchmark.person A").
		WillReturnRows(rows)
	store := NewPersonStore(ctx, db).WithoutJoins()
	data, err := store.Query()
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}

	if len(data) != 2 {
		t.Errorf("number of rows != 2: %d", len(data))
	}
}

func TestPersonPetsEagerFetch(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	rows := sqlmock.NewRows([]string{"A.id", "A.name"}).
		AddRow(0, "")
	mock.ExpectQuery("SELECT A.id, A.name FROM fake_benchmark.person A").
		WillReturnRows(rows)

	rows = sqlmock.NewRows([]string{"A.id", "A.person_id", "A.tag_id", "A.species", "B.id", "B.name", "C.id", "C.name"}).
		AddRow(1, 0, 0, "", 0, "", 0, "").
		AddRow(2, 0, 0, "", 0, "", 0, "")

	mock.ExpectQuery("SELECT A.id, A.person_id, A.tag_id, A.species, B.id, B.name, C.id, C.name FROM fake_benchmark.pet A LEFT JOIN fake_benchmark.person B ON (A.person_id = B.id) LEFT JOIN fake_benchmark.tag C ON (A.tag_id = C.id) WHERE person_id IN (0) ORDER BY A.person_id DESC, A.id DESC").
		WillReturnRows(rows)
	store := NewPersonStore(ctx, db)
	data, err := store.Query()
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}
	err = store.EagerFetchPets(data)
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}

	if len(data) != 1 {
		t.Errorf("number of base rows != 1: %d", len(data))
	}

	if len(data[0].Pets) != 2 {
		t.Errorf("should have 2 associated rows: %v", data)
	}
}

func TestPersonDelete(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("DELETE FROM fake_benchmark.person WHERE id = ?").
		WithArgs(0).
		WillReturnResult(sqlmock.NewResult(0, 1))
	aff, err := NewPersonStore(ctx, db).Delete(&codegen.Person{})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 1 {
		t.Errorf("a single row should be affected: %d", aff)
	}
}

func TestPersonDeleteSlice(t *testing.T) {
	ctx := &codegen.Context{Log: &zerolog.Logger{}}
	db, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()
	mock.
		ExpectExec("DELETE FROM fake_benchmark.person WHERE id IN (0,0)").
		WillReturnResult(sqlmock.NewResult(0, 2))
	aff, err := NewPersonStore(ctx, db).DeleteSlice([]*codegen.Person{{}, {}})
	if err != nil {
		t.Fatalf("SQL error '%s'", err)
	}

	// we make sure that all expectations were met
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
	if aff != 2 {
		t.Errorf("two rows should be affected: %d", aff)
	}
}

// ^^ END OF GENERATED BY CODEGEN. ^^
