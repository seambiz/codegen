package db

import (
	"database/sql"

	"bitbucket.org/codegen"
	"bitbucket.org/codegen/db/mysql"
)

// GENERATED BY CODEGEN. DO NOT EDIT.
// ^^ END OF GENERATED BY CODEGEN. DO NOT EDIT. ^^

/* KeyColumnUsageRepo implemente KeyColumnUsageRepository interface definition. */
type KeyColumnUsageRepo struct {
	conn *sql.DB
}

func NewKeyColumnUsageRepo(conn *sql.DB) *KeyColumnUsageRepo {
	return &KeyColumnUsageRepo{
		conn: conn,
	}
}

func (r KeyColumnUsageRepo) Create(ctx *codegen.BaseContext, data *codegen.KeyColumnUsage) error {
	panic("not implemented")
}

func (r KeyColumnUsageRepo) Update(ctx *codegen.BaseContext, data *codegen.KeyColumnUsage) error {
	panic("not implemented")
}

func (r KeyColumnUsageRepo) UpdatePartial(ctx *codegen.BaseContext, data *codegen.KeyColumnUsagePartial) error {
	panic("not implemented")
}

func (r KeyColumnUsageRepo) Delete(ctx *codegen.BaseContext, data *codegen.KeyColumnUsage) error {
	panic("not implemented")
}

func (r KeyColumnUsageRepo) Upsert(ctx *codegen.BaseContext, data []*codegen.KeyColumnUsage) error {
	panic("not implemented")
}

func (r KeyColumnUsageRepo) QueryBySchemaAndRefSchemaAndTable(ctx *codegen.BaseContext, schema, refschema, table string) ([]*codegen.KeyColumnUsage, error) {
	return mysql.NewKeyColumnUsageStore(ctx, r.conn).
		Where("UPPER(table_schema) = UPPER(?) AND UPPER(referenced_table_schema) = UPPER(?) AND UPPER(table_name) = UPPER(?)").
		OrderBy("constraint_name, ordinal_position").
		Query(schema, refschema, table)
}
