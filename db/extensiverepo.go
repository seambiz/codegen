package db

import (
	"database/sql"

	"bitbucket.org/codegen"
	"bitbucket.org/codegen/db/mysql"
)

// GENERATED BY CODEGEN.

/* ExtensiveRepo implements ExtensiveRepository interface definition. */
type ExtensiveRepo struct {
	conn *sql.DB
}

func NewExtensiveRepo(conn *sql.DB) codegen.ExtensiveRepository {
	return &ExtensiveRepo{
		conn: conn,
	}
}

func (r ExtensiveRepo) Create(ctx *codegen.Context, data *codegen.Extensive) error {
	return mysql.NewExtensiveStore(ctx, r.conn).Insert(data)
}

func (r ExtensiveRepo) Update(ctx *codegen.Context, data *codegen.Extensive) error {
	_, err := mysql.NewExtensiveStore(ctx, r.conn).Update(data)
	return err
}

func (r ExtensiveRepo) UpdatePartial(ctx *codegen.Context, data *codegen.ExtensivePartial) error {
	_, err := mysql.NewExtensiveStore(ctx, r.conn).SetBits(&data.Touched).Update(&data.Extensive)
	return err
}

func (r ExtensiveRepo) Delete(ctx *codegen.Context, data *codegen.Extensive) error {
	_, err := mysql.NewExtensiveStore(ctx, r.conn).Delete(data)
	return err
}

func (r ExtensiveRepo) OneByID(ctx *codegen.Context, id int) (*codegen.Extensive, error) {
	return mysql.NewExtensiveStore(ctx, r.conn).OneByID(id)
}

// ^^ END OF GENERATED BY CODEGEN. ^^
