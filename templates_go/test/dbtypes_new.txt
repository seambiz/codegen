package testing

import (
	"math/big"
)

// GENERATED BY CODEGEN.

// TestTable1 represents a row from test_table_1.
type TestTable1 struct {
	First     string `json:"first" db:"first"`
	Second    int    `json:"second" db:"second"`
	PtrSecond *int   `json:"ptr_second" db:"ptr_second"`
}

// TestTable2 represents a row from test_table_2.
type TestTable2 struct {
	Third  string `json:"third" db:"third"`
	Fourth string `json:"fourth" db:"fourth"`
}

// TestTable1Partial is used for updating specific columns from test_table_1.
type TestTable1Partial struct {
	TestTable1
	Touched big.Int
}

func (p *TestTable1Partial) SetFirst(param string) {
	p.First = param
	p.Touched.SetBit(&p.Touched, TestTable1_First, 1)
}

func (p *TestTable1Partial) SetSecond(param int) {
	p.Second = param
	p.Touched.SetBit(&p.Touched, TestTable1_Second, 1)
}

func (p *TestTable1Partial) SetPtrSecond(param *int) {
	p.PtrSecond = param
	p.Touched.SetBit(&p.Touched, TestTable1_PtrSecond, 1)
}

// TestTable2Partial is used for updating specific columns from test_table_2.
type TestTable2Partial struct {
	TestTable2
	Touched big.Int
}

func (p *TestTable2Partial) SetThird(param string) {
	p.Third = param
	p.Touched.SetBit(&p.Touched, TestTable2_Third, 1)
}

func (p *TestTable2Partial) SetFourth(param string) {
	p.Fourth = param
	p.Touched.SetBit(&p.Touched, TestTable2_Fourth, 1)
}

// ^^ END OF GENERATED BY CODEGEN. ^^
