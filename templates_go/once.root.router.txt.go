package main

import (
	"github.com/seambiz/codegen/config"
	"github.com/seambiz/codegen/gen"
)

type Router struct{}

func (Router) Generate(conf *config.Config) string {
	g := gen.NewGenerator()

	g.Package(conf.RootPackage)
	g.Import("github.com/go-chi/chi/v5")

	g.Comment("GENERATED BY CODEGEN.")
	g.NewLine()

	g.Func("main").Body(func() {
		g.Go("r := chi.NewRouter()")
		g.NewLine()

		for _, schema := range conf.Schemas {
			for _, t := range schema.Tables {
				g.Go("r.Mount(", `"/`, t.Name, `", khttp.LCRUD{`)
				g.Go("List: khttp.GetHandler(repo", t.Title, ".List),")
				g.Go("Create: khttp.JsonHandler(", t.Title, "Svc.Create),")
				g.Go("Read: khttp.ParamIntHandler(", `"`, t.Name, `_id", repo`, t.Title, ".OneByID),")
				g.Go("Update: khttp.JsonIntHandler(", `"`, t.Name, `_id", `, t.Title, "Svc.Update),")
				g.Go("Delete: khttp.ParamIntHandler(", `"`, t.Name, `_id", `, t.Title, "Svc.Delete),")
				g.Go("})")
			}
		}
	})

	g.NewLine()
	g.Comment("^^ END OF GENERATED BY CODEGEN. ^^")

	return g.String()
}
